/**
 *
 *  AirportsController.cc
 *  This file is generated by drogon_ctl
 *
 */

#include "AirportsController.h"
#include <string>
#include <drogon/orm/Mapper.h>
#include <drogon/orm/Criteria.h>
#include <drogon/HttpAppFramework.h>

namespace api::v1
{
    void AirportsController::getOne(const HttpRequestPtr& req,
                                    std::function<void(const HttpResponsePtr&)>&& callback,
                                    Airports::PrimaryKeyType&& id)
    {
        AirportsControllerBase::getOne(req, std::move(callback), std::move(id));
    }


    void AirportsController::updateOne(const HttpRequestPtr& req,
                                       std::function<void(const HttpResponsePtr&)>&& callback,
                                       Airports::PrimaryKeyType&& id)
    {
        AirportsControllerBase::updateOne(req, std::move(callback), std::move(id));
    }


    void AirportsController::deleteOne(const HttpRequestPtr& req,
                                       std::function<void(const HttpResponsePtr&)>&& callback,
                                       Airports::PrimaryKeyType&& id)
    {
        AirportsControllerBase::deleteOne(req, std::move(callback), std::move(id));
    }

    void AirportsController::get(const HttpRequestPtr& req,
                                 std::function<void(const HttpResponsePtr&)>&& callback)
    {
        auto clientPtr = drogon::app().getDbClient();
        drogon::orm::Mapper<Airports> mapper(clientPtr);

        // Check if a search parameter is provided
        if (req->getParameter("search").length() > 0)
        {
            auto searchTerm = req->getParameter("search");
            if (!searchTerm.empty())
            {
                // Use a single search term for all relevant fields
                std::string likePattern = "%" + searchTerm + "%";

                // Build criteria with OR conditions for each field to search
                drogon::orm::Criteria criteria(
                    "ident", drogon::orm::CompareOperator::Like, likePattern);
                criteria = criteria || drogon::orm::Criteria(
                    "name", drogon::orm::CompareOperator::Like, likePattern);
                criteria = criteria || drogon::orm::Criteria(
                    "municipality", drogon::orm::CompareOperator::Like, likePattern);
                criteria = criteria || drogon::orm::Criteria(
                    "icao_code", drogon::orm::CompareOperator::Like, likePattern);
                criteria = criteria || drogon::orm::Criteria(
                    "iata_code", drogon::orm::CompareOperator::Like, likePattern);
                criteria = criteria || drogon::orm::Criteria(
                    "gps_code", drogon::orm::CompareOperator::Like, likePattern);
                criteria = criteria || drogon::orm::Criteria(
                    "local_code", drogon::orm::CompareOperator::Like, likePattern);
                criteria = criteria || drogon::orm::Criteria(
                    "keywords", drogon::orm::CompareOperator::Like, likePattern);


                criteria = criteria && drogon::orm::Criteria(
                    "type", drogon::orm::CompareOperator::NE, "heliport");

                mapper.findBy(criteria,
                              [callback](const std::vector<Airports>& airports)
                              {
                                  Json::Value ret;
                                  for (const auto& airport : airports)
                                  {
                                      ret.append(airport.toJson());
                                  }
                                  auto resp = HttpResponse::newHttpJsonResponse(ret);
                                  callback(resp);
                              },
                              [callback](const drogon::orm::DrogonDbException& e)
                              {
                                  Json::Value ret;
                                  ret["error"] = e.base().what();
                                  auto resp = HttpResponse::newHttpJsonResponse(ret);
                                  resp->setStatusCode(k500InternalServerError);
                                  callback(resp);
                              });
                return;
            }
        }

        // If no search term is provided, return an empty array
        Json::Value ret(Json::arrayValue);
        auto resp = HttpResponse::newHttpJsonResponse(ret);
        callback(resp);
    }

    void AirportsController::create(const HttpRequestPtr& req,
                                    std::function<void(const HttpResponsePtr&)>&& callback)
    {
        AirportsControllerBase::create(req, std::move(callback));
    }
}
