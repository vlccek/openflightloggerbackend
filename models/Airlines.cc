/**
 *
 *  Airlines.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Airlines.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::mydatabase;

const std::string Airlines::Cols::_airline_id = "\"airline_id\"";
const std::string Airlines::Cols::_name = "\"name\"";
const std::string Airlines::Cols::_alias = "\"alias\"";
const std::string Airlines::Cols::_iata_code = "\"iata_code\"";
const std::string Airlines::Cols::_icao_code = "\"icao_code\"";
const std::string Airlines::Cols::_callsign = "\"callsign\"";
const std::string Airlines::Cols::_country = "\"country\"";
const std::string Airlines::Cols::_active = "\"active\"";
const std::string Airlines::primaryKeyName = "airline_id";
const bool Airlines::hasPrimaryKey = true;
const std::string Airlines::tableName = "\"airlines\"";

const std::vector<typename Airlines::MetaData> Airlines::metaData_={
{"airline_id","int32_t","integer",4,1,1,1},
{"name","std::string","character varying",255,0,0,1},
{"alias","std::string","character varying",255,0,0,0},
{"iata_code","std::string","character",0,0,0,0},
{"icao_code","std::string","character",0,0,0,0},
{"callsign","std::string","character varying",255,0,0,0},
{"country","std::string","character varying",255,0,0,1},
{"active","bool","boolean",1,0,0,1}
};
const std::string &Airlines::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Airlines::Airlines(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["airline_id"].isNull())
        {
            airlineId_=std::make_shared<int32_t>(r["airline_id"].as<int32_t>());
        }
        if(!r["name"].isNull())
        {
            name_=std::make_shared<std::string>(r["name"].as<std::string>());
        }
        if(!r["alias"].isNull())
        {
            alias_=std::make_shared<std::string>(r["alias"].as<std::string>());
        }
        if(!r["iata_code"].isNull())
        {
            iataCode_=std::make_shared<std::string>(r["iata_code"].as<std::string>());
        }
        if(!r["icao_code"].isNull())
        {
            icaoCode_=std::make_shared<std::string>(r["icao_code"].as<std::string>());
        }
        if(!r["callsign"].isNull())
        {
            callsign_=std::make_shared<std::string>(r["callsign"].as<std::string>());
        }
        if(!r["country"].isNull())
        {
            country_=std::make_shared<std::string>(r["country"].as<std::string>());
        }
        if(!r["active"].isNull())
        {
            active_=std::make_shared<bool>(r["active"].as<bool>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 8 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            airlineId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            name_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            alias_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            iataCode_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            icaoCode_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            callsign_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            country_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            active_=std::make_shared<bool>(r[index].as<bool>());
        }
    }

}

Airlines::Airlines(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 8)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            airlineId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            alias_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            iataCode_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            icaoCode_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            callsign_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            country_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            active_=std::make_shared<bool>(pJson[pMasqueradingVector[7]].asBool());
        }
    }
}

Airlines::Airlines(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("airline_id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["airline_id"].isNull())
        {
            airlineId_=std::make_shared<int32_t>((int32_t)pJson["airline_id"].asInt64());
        }
    }
    if(pJson.isMember("name"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("alias"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["alias"].isNull())
        {
            alias_=std::make_shared<std::string>(pJson["alias"].asString());
        }
    }
    if(pJson.isMember("iata_code"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["iata_code"].isNull())
        {
            iataCode_=std::make_shared<std::string>(pJson["iata_code"].asString());
        }
    }
    if(pJson.isMember("icao_code"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["icao_code"].isNull())
        {
            icaoCode_=std::make_shared<std::string>(pJson["icao_code"].asString());
        }
    }
    if(pJson.isMember("callsign"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["callsign"].isNull())
        {
            callsign_=std::make_shared<std::string>(pJson["callsign"].asString());
        }
    }
    if(pJson.isMember("country"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["country"].isNull())
        {
            country_=std::make_shared<std::string>(pJson["country"].asString());
        }
    }
    if(pJson.isMember("active"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["active"].isNull())
        {
            active_=std::make_shared<bool>(pJson["active"].asBool());
        }
    }
}

void Airlines::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 8)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            airlineId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            alias_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            iataCode_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            icaoCode_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            callsign_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            country_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            active_=std::make_shared<bool>(pJson[pMasqueradingVector[7]].asBool());
        }
    }
}

void Airlines::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("airline_id"))
    {
        if(!pJson["airline_id"].isNull())
        {
            airlineId_=std::make_shared<int32_t>((int32_t)pJson["airline_id"].asInt64());
        }
    }
    if(pJson.isMember("name"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("alias"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["alias"].isNull())
        {
            alias_=std::make_shared<std::string>(pJson["alias"].asString());
        }
    }
    if(pJson.isMember("iata_code"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["iata_code"].isNull())
        {
            iataCode_=std::make_shared<std::string>(pJson["iata_code"].asString());
        }
    }
    if(pJson.isMember("icao_code"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["icao_code"].isNull())
        {
            icaoCode_=std::make_shared<std::string>(pJson["icao_code"].asString());
        }
    }
    if(pJson.isMember("callsign"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["callsign"].isNull())
        {
            callsign_=std::make_shared<std::string>(pJson["callsign"].asString());
        }
    }
    if(pJson.isMember("country"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["country"].isNull())
        {
            country_=std::make_shared<std::string>(pJson["country"].asString());
        }
    }
    if(pJson.isMember("active"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["active"].isNull())
        {
            active_=std::make_shared<bool>(pJson["active"].asBool());
        }
    }
}

const int32_t &Airlines::getValueOfAirlineId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(airlineId_)
        return *airlineId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Airlines::getAirlineId() const noexcept
{
    return airlineId_;
}
void Airlines::setAirlineId(const int32_t &pAirlineId) noexcept
{
    airlineId_ = std::make_shared<int32_t>(pAirlineId);
    dirtyFlag_[0] = true;
}
const typename Airlines::PrimaryKeyType & Airlines::getPrimaryKey() const
{
    assert(airlineId_);
    return *airlineId_;
}

const std::string &Airlines::getValueOfName() const noexcept
{
    static const std::string defaultValue = std::string();
    if(name_)
        return *name_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Airlines::getName() const noexcept
{
    return name_;
}
void Airlines::setName(const std::string &pName) noexcept
{
    name_ = std::make_shared<std::string>(pName);
    dirtyFlag_[1] = true;
}
void Airlines::setName(std::string &&pName) noexcept
{
    name_ = std::make_shared<std::string>(std::move(pName));
    dirtyFlag_[1] = true;
}

const std::string &Airlines::getValueOfAlias() const noexcept
{
    static const std::string defaultValue = std::string();
    if(alias_)
        return *alias_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Airlines::getAlias() const noexcept
{
    return alias_;
}
void Airlines::setAlias(const std::string &pAlias) noexcept
{
    alias_ = std::make_shared<std::string>(pAlias);
    dirtyFlag_[2] = true;
}
void Airlines::setAlias(std::string &&pAlias) noexcept
{
    alias_ = std::make_shared<std::string>(std::move(pAlias));
    dirtyFlag_[2] = true;
}
void Airlines::setAliasToNull() noexcept
{
    alias_.reset();
    dirtyFlag_[2] = true;
}

const std::string &Airlines::getValueOfIataCode() const noexcept
{
    static const std::string defaultValue = std::string();
    if(iataCode_)
        return *iataCode_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Airlines::getIataCode() const noexcept
{
    return iataCode_;
}
void Airlines::setIataCode(const std::string &pIataCode) noexcept
{
    iataCode_ = std::make_shared<std::string>(pIataCode);
    dirtyFlag_[3] = true;
}
void Airlines::setIataCode(std::string &&pIataCode) noexcept
{
    iataCode_ = std::make_shared<std::string>(std::move(pIataCode));
    dirtyFlag_[3] = true;
}
void Airlines::setIataCodeToNull() noexcept
{
    iataCode_.reset();
    dirtyFlag_[3] = true;
}

const std::string &Airlines::getValueOfIcaoCode() const noexcept
{
    static const std::string defaultValue = std::string();
    if(icaoCode_)
        return *icaoCode_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Airlines::getIcaoCode() const noexcept
{
    return icaoCode_;
}
void Airlines::setIcaoCode(const std::string &pIcaoCode) noexcept
{
    icaoCode_ = std::make_shared<std::string>(pIcaoCode);
    dirtyFlag_[4] = true;
}
void Airlines::setIcaoCode(std::string &&pIcaoCode) noexcept
{
    icaoCode_ = std::make_shared<std::string>(std::move(pIcaoCode));
    dirtyFlag_[4] = true;
}
void Airlines::setIcaoCodeToNull() noexcept
{
    icaoCode_.reset();
    dirtyFlag_[4] = true;
}

const std::string &Airlines::getValueOfCallsign() const noexcept
{
    static const std::string defaultValue = std::string();
    if(callsign_)
        return *callsign_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Airlines::getCallsign() const noexcept
{
    return callsign_;
}
void Airlines::setCallsign(const std::string &pCallsign) noexcept
{
    callsign_ = std::make_shared<std::string>(pCallsign);
    dirtyFlag_[5] = true;
}
void Airlines::setCallsign(std::string &&pCallsign) noexcept
{
    callsign_ = std::make_shared<std::string>(std::move(pCallsign));
    dirtyFlag_[5] = true;
}
void Airlines::setCallsignToNull() noexcept
{
    callsign_.reset();
    dirtyFlag_[5] = true;
}

const std::string &Airlines::getValueOfCountry() const noexcept
{
    static const std::string defaultValue = std::string();
    if(country_)
        return *country_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Airlines::getCountry() const noexcept
{
    return country_;
}
void Airlines::setCountry(const std::string &pCountry) noexcept
{
    country_ = std::make_shared<std::string>(pCountry);
    dirtyFlag_[6] = true;
}
void Airlines::setCountry(std::string &&pCountry) noexcept
{
    country_ = std::make_shared<std::string>(std::move(pCountry));
    dirtyFlag_[6] = true;
}

const bool &Airlines::getValueOfActive() const noexcept
{
    static const bool defaultValue = bool();
    if(active_)
        return *active_;
    return defaultValue;
}
const std::shared_ptr<bool> &Airlines::getActive() const noexcept
{
    return active_;
}
void Airlines::setActive(const bool &pActive) noexcept
{
    active_ = std::make_shared<bool>(pActive);
    dirtyFlag_[7] = true;
}

void Airlines::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Airlines::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "name",
        "alias",
        "iata_code",
        "icao_code",
        "callsign",
        "country",
        "active"
    };
    return inCols;
}

void Airlines::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getAlias())
        {
            binder << getValueOfAlias();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getIataCode())
        {
            binder << getValueOfIataCode();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getIcaoCode())
        {
            binder << getValueOfIcaoCode();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getCallsign())
        {
            binder << getValueOfCallsign();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getCountry())
        {
            binder << getValueOfCountry();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getActive())
        {
            binder << getValueOfActive();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Airlines::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    return ret;
}

void Airlines::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getAlias())
        {
            binder << getValueOfAlias();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getIataCode())
        {
            binder << getValueOfIataCode();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getIcaoCode())
        {
            binder << getValueOfIcaoCode();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getCallsign())
        {
            binder << getValueOfCallsign();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getCountry())
        {
            binder << getValueOfCountry();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getActive())
        {
            binder << getValueOfActive();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Airlines::toJson() const
{
    Json::Value ret;
    if(getAirlineId())
    {
        ret["airline_id"]=getValueOfAirlineId();
    }
    else
    {
        ret["airline_id"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getAlias())
    {
        ret["alias"]=getValueOfAlias();
    }
    else
    {
        ret["alias"]=Json::Value();
    }
    if(getIataCode())
    {
        ret["iata_code"]=getValueOfIataCode();
    }
    else
    {
        ret["iata_code"]=Json::Value();
    }
    if(getIcaoCode())
    {
        ret["icao_code"]=getValueOfIcaoCode();
    }
    else
    {
        ret["icao_code"]=Json::Value();
    }
    if(getCallsign())
    {
        ret["callsign"]=getValueOfCallsign();
    }
    else
    {
        ret["callsign"]=Json::Value();
    }
    if(getCountry())
    {
        ret["country"]=getValueOfCountry();
    }
    else
    {
        ret["country"]=Json::Value();
    }
    if(getActive())
    {
        ret["active"]=getValueOfActive();
    }
    else
    {
        ret["active"]=Json::Value();
    }
    return ret;
}

Json::Value Airlines::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 8)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getAirlineId())
            {
                ret[pMasqueradingVector[0]]=getValueOfAirlineId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getName())
            {
                ret[pMasqueradingVector[1]]=getValueOfName();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getAlias())
            {
                ret[pMasqueradingVector[2]]=getValueOfAlias();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getIataCode())
            {
                ret[pMasqueradingVector[3]]=getValueOfIataCode();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getIcaoCode())
            {
                ret[pMasqueradingVector[4]]=getValueOfIcaoCode();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getCallsign())
            {
                ret[pMasqueradingVector[5]]=getValueOfCallsign();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getCountry())
            {
                ret[pMasqueradingVector[6]]=getValueOfCountry();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getActive())
            {
                ret[pMasqueradingVector[7]]=getValueOfActive();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getAirlineId())
    {
        ret["airline_id"]=getValueOfAirlineId();
    }
    else
    {
        ret["airline_id"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getAlias())
    {
        ret["alias"]=getValueOfAlias();
    }
    else
    {
        ret["alias"]=Json::Value();
    }
    if(getIataCode())
    {
        ret["iata_code"]=getValueOfIataCode();
    }
    else
    {
        ret["iata_code"]=Json::Value();
    }
    if(getIcaoCode())
    {
        ret["icao_code"]=getValueOfIcaoCode();
    }
    else
    {
        ret["icao_code"]=Json::Value();
    }
    if(getCallsign())
    {
        ret["callsign"]=getValueOfCallsign();
    }
    else
    {
        ret["callsign"]=Json::Value();
    }
    if(getCountry())
    {
        ret["country"]=getValueOfCountry();
    }
    else
    {
        ret["country"]=Json::Value();
    }
    if(getActive())
    {
        ret["active"]=getValueOfActive();
    }
    else
    {
        ret["active"]=Json::Value();
    }
    return ret;
}

bool Airlines::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("airline_id"))
    {
        if(!validJsonOfField(0, "airline_id", pJson["airline_id"], err, true))
            return false;
    }
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(1, "name", pJson["name"], err, true))
            return false;
    }
    else
    {
        err="The name column cannot be null";
        return false;
    }
    if(pJson.isMember("alias"))
    {
        if(!validJsonOfField(2, "alias", pJson["alias"], err, true))
            return false;
    }
    if(pJson.isMember("iata_code"))
    {
        if(!validJsonOfField(3, "iata_code", pJson["iata_code"], err, true))
            return false;
    }
    if(pJson.isMember("icao_code"))
    {
        if(!validJsonOfField(4, "icao_code", pJson["icao_code"], err, true))
            return false;
    }
    if(pJson.isMember("callsign"))
    {
        if(!validJsonOfField(5, "callsign", pJson["callsign"], err, true))
            return false;
    }
    if(pJson.isMember("country"))
    {
        if(!validJsonOfField(6, "country", pJson["country"], err, true))
            return false;
    }
    else
    {
        err="The country column cannot be null";
        return false;
    }
    if(pJson.isMember("active"))
    {
        if(!validJsonOfField(7, "active", pJson["active"], err, true))
            return false;
    }
    else
    {
        err="The active column cannot be null";
        return false;
    }
    return true;
}
bool Airlines::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                  const std::vector<std::string> &pMasqueradingVector,
                                                  std::string &err)
{
    if(pMasqueradingVector.size() != 8)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[6] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[7] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Airlines::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("airline_id"))
    {
        if(!validJsonOfField(0, "airline_id", pJson["airline_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(1, "name", pJson["name"], err, false))
            return false;
    }
    if(pJson.isMember("alias"))
    {
        if(!validJsonOfField(2, "alias", pJson["alias"], err, false))
            return false;
    }
    if(pJson.isMember("iata_code"))
    {
        if(!validJsonOfField(3, "iata_code", pJson["iata_code"], err, false))
            return false;
    }
    if(pJson.isMember("icao_code"))
    {
        if(!validJsonOfField(4, "icao_code", pJson["icao_code"], err, false))
            return false;
    }
    if(pJson.isMember("callsign"))
    {
        if(!validJsonOfField(5, "callsign", pJson["callsign"], err, false))
            return false;
    }
    if(pJson.isMember("country"))
    {
        if(!validJsonOfField(6, "country", pJson["country"], err, false))
            return false;
    }
    if(pJson.isMember("active"))
    {
        if(!validJsonOfField(7, "active", pJson["active"], err, false))
            return false;
    }
    return true;
}
bool Airlines::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                std::string &err)
{
    if(pMasqueradingVector.size() != 8)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Airlines::validJsonOfField(size_t index,
                                const std::string &fieldName,
                                const Json::Value &pJson,
                                std::string &err,
                                bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 7:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isBool())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
