/**
 *
 *  Airports.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Airports.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::mydatabase;

const std::string Airports::Cols::_id = "\"id\"";
const std::string Airports::Cols::_ident = "\"ident\"";
const std::string Airports::Cols::_type = "\"type\"";
const std::string Airports::Cols::_name = "\"name\"";
const std::string Airports::Cols::_latitude_deg = "\"latitude_deg\"";
const std::string Airports::Cols::_longitude_deg = "\"longitude_deg\"";
const std::string Airports::Cols::_elevation_ft = "\"elevation_ft\"";
const std::string Airports::Cols::_continent = "\"continent\"";
const std::string Airports::Cols::_iso_country = "\"iso_country\"";
const std::string Airports::Cols::_iso_region = "\"iso_region\"";
const std::string Airports::Cols::_municipality = "\"municipality\"";
const std::string Airports::Cols::_scheduled_service = "\"scheduled_service\"";
const std::string Airports::Cols::_icao_code = "\"icao_code\"";
const std::string Airports::Cols::_iata_code = "\"iata_code\"";
const std::string Airports::Cols::_gps_code = "\"gps_code\"";
const std::string Airports::Cols::_local_code = "\"local_code\"";
const std::string Airports::Cols::_home_link = "\"home_link\"";
const std::string Airports::Cols::_wikipedia_link = "\"wikipedia_link\"";
const std::string Airports::Cols::_keywords = "\"keywords\"";
const std::string Airports::primaryKeyName = "id";
const bool Airports::hasPrimaryKey = true;
const std::string Airports::tableName = "\"airports\"";

const std::vector<typename Airports::MetaData> Airports::metaData_={
{"id","int32_t","integer",4,0,1,1},
{"ident","std::string","character varying",20,0,0,1},
{"type","std::string","USER-DEFINED",0,0,0,1},
{"name","std::string","character varying",255,0,0,1},
{"latitude_deg","std::string","numeric",0,0,0,1},
{"longitude_deg","std::string","numeric",0,0,0,1},
{"elevation_ft","int32_t","integer",4,0,0,0},
{"continent","std::string","character varying",10,0,0,0},
{"iso_country","std::string","character",0,0,0,1},
{"iso_region","std::string","character varying",10,0,0,1},
{"municipality","std::string","character varying",100,0,0,0},
{"scheduled_service","bool","boolean",1,0,0,1},
{"icao_code","std::string","character varying",4,0,0,0},
{"iata_code","std::string","character varying",3,0,0,0},
{"gps_code","std::string","character varying",4,0,0,0},
{"local_code","std::string","character varying",10,0,0,0},
{"home_link","std::string","text",0,0,0,0},
{"wikipedia_link","std::string","text",0,0,0,0},
{"keywords","std::string","text",0,0,0,0}
};
const std::string &Airports::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Airports::Airports(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["ident"].isNull())
        {
            ident_=std::make_shared<std::string>(r["ident"].as<std::string>());
        }
        if(!r["type"].isNull())
        {
            type_=std::make_shared<std::string>(r["type"].as<std::string>());
        }
        if(!r["name"].isNull())
        {
            name_=std::make_shared<std::string>(r["name"].as<std::string>());
        }
        if(!r["latitude_deg"].isNull())
        {
            latitudeDeg_=std::make_shared<std::string>(r["latitude_deg"].as<std::string>());
        }
        if(!r["longitude_deg"].isNull())
        {
            longitudeDeg_=std::make_shared<std::string>(r["longitude_deg"].as<std::string>());
        }
        if(!r["elevation_ft"].isNull())
        {
            elevationFt_=std::make_shared<int32_t>(r["elevation_ft"].as<int32_t>());
        }
        if(!r["continent"].isNull())
        {
            continent_=std::make_shared<std::string>(r["continent"].as<std::string>());
        }
        if(!r["iso_country"].isNull())
        {
            isoCountry_=std::make_shared<std::string>(r["iso_country"].as<std::string>());
        }
        if(!r["iso_region"].isNull())
        {
            isoRegion_=std::make_shared<std::string>(r["iso_region"].as<std::string>());
        }
        if(!r["municipality"].isNull())
        {
            municipality_=std::make_shared<std::string>(r["municipality"].as<std::string>());
        }
        if(!r["scheduled_service"].isNull())
        {
            scheduledService_=std::make_shared<bool>(r["scheduled_service"].as<bool>());
        }
        if(!r["icao_code"].isNull())
        {
            icaoCode_=std::make_shared<std::string>(r["icao_code"].as<std::string>());
        }
        if(!r["iata_code"].isNull())
        {
            iataCode_=std::make_shared<std::string>(r["iata_code"].as<std::string>());
        }
        if(!r["gps_code"].isNull())
        {
            gpsCode_=std::make_shared<std::string>(r["gps_code"].as<std::string>());
        }
        if(!r["local_code"].isNull())
        {
            localCode_=std::make_shared<std::string>(r["local_code"].as<std::string>());
        }
        if(!r["home_link"].isNull())
        {
            homeLink_=std::make_shared<std::string>(r["home_link"].as<std::string>());
        }
        if(!r["wikipedia_link"].isNull())
        {
            wikipediaLink_=std::make_shared<std::string>(r["wikipedia_link"].as<std::string>());
        }
        if(!r["keywords"].isNull())
        {
            keywords_=std::make_shared<std::string>(r["keywords"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 19 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            ident_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            type_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            name_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            latitudeDeg_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            longitudeDeg_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            elevationFt_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            continent_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            isoCountry_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            isoRegion_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            municipality_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            scheduledService_=std::make_shared<bool>(r[index].as<bool>());
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            icaoCode_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            iataCode_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 14;
        if(!r[index].isNull())
        {
            gpsCode_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 15;
        if(!r[index].isNull())
        {
            localCode_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 16;
        if(!r[index].isNull())
        {
            homeLink_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 17;
        if(!r[index].isNull())
        {
            wikipediaLink_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 18;
        if(!r[index].isNull())
        {
            keywords_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Airports::Airports(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 19)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            ident_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            type_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            latitudeDeg_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            longitudeDeg_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            elevationFt_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            continent_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            isoCountry_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            isoRegion_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            municipality_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            scheduledService_=std::make_shared<bool>(pJson[pMasqueradingVector[11]].asBool());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            icaoCode_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            iataCode_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            gpsCode_=std::make_shared<std::string>(pJson[pMasqueradingVector[14]].asString());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            localCode_=std::make_shared<std::string>(pJson[pMasqueradingVector[15]].asString());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            homeLink_=std::make_shared<std::string>(pJson[pMasqueradingVector[16]].asString());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            wikipediaLink_=std::make_shared<std::string>(pJson[pMasqueradingVector[17]].asString());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            keywords_=std::make_shared<std::string>(pJson[pMasqueradingVector[18]].asString());
        }
    }
}

Airports::Airports(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("ident"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["ident"].isNull())
        {
            ident_=std::make_shared<std::string>(pJson["ident"].asString());
        }
    }
    if(pJson.isMember("type"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["type"].isNull())
        {
            type_=std::make_shared<std::string>(pJson["type"].asString());
        }
    }
    if(pJson.isMember("name"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("latitude_deg"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["latitude_deg"].isNull())
        {
            latitudeDeg_=std::make_shared<std::string>(pJson["latitude_deg"].asString());
        }
    }
    if(pJson.isMember("longitude_deg"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["longitude_deg"].isNull())
        {
            longitudeDeg_=std::make_shared<std::string>(pJson["longitude_deg"].asString());
        }
    }
    if(pJson.isMember("elevation_ft"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["elevation_ft"].isNull())
        {
            elevationFt_=std::make_shared<int32_t>((int32_t)pJson["elevation_ft"].asInt64());
        }
    }
    if(pJson.isMember("continent"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["continent"].isNull())
        {
            continent_=std::make_shared<std::string>(pJson["continent"].asString());
        }
    }
    if(pJson.isMember("iso_country"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["iso_country"].isNull())
        {
            isoCountry_=std::make_shared<std::string>(pJson["iso_country"].asString());
        }
    }
    if(pJson.isMember("iso_region"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["iso_region"].isNull())
        {
            isoRegion_=std::make_shared<std::string>(pJson["iso_region"].asString());
        }
    }
    if(pJson.isMember("municipality"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["municipality"].isNull())
        {
            municipality_=std::make_shared<std::string>(pJson["municipality"].asString());
        }
    }
    if(pJson.isMember("scheduled_service"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["scheduled_service"].isNull())
        {
            scheduledService_=std::make_shared<bool>(pJson["scheduled_service"].asBool());
        }
    }
    if(pJson.isMember("icao_code"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["icao_code"].isNull())
        {
            icaoCode_=std::make_shared<std::string>(pJson["icao_code"].asString());
        }
    }
    if(pJson.isMember("iata_code"))
    {
        dirtyFlag_[13]=true;
        if(!pJson["iata_code"].isNull())
        {
            iataCode_=std::make_shared<std::string>(pJson["iata_code"].asString());
        }
    }
    if(pJson.isMember("gps_code"))
    {
        dirtyFlag_[14]=true;
        if(!pJson["gps_code"].isNull())
        {
            gpsCode_=std::make_shared<std::string>(pJson["gps_code"].asString());
        }
    }
    if(pJson.isMember("local_code"))
    {
        dirtyFlag_[15]=true;
        if(!pJson["local_code"].isNull())
        {
            localCode_=std::make_shared<std::string>(pJson["local_code"].asString());
        }
    }
    if(pJson.isMember("home_link"))
    {
        dirtyFlag_[16]=true;
        if(!pJson["home_link"].isNull())
        {
            homeLink_=std::make_shared<std::string>(pJson["home_link"].asString());
        }
    }
    if(pJson.isMember("wikipedia_link"))
    {
        dirtyFlag_[17]=true;
        if(!pJson["wikipedia_link"].isNull())
        {
            wikipediaLink_=std::make_shared<std::string>(pJson["wikipedia_link"].asString());
        }
    }
    if(pJson.isMember("keywords"))
    {
        dirtyFlag_[18]=true;
        if(!pJson["keywords"].isNull())
        {
            keywords_=std::make_shared<std::string>(pJson["keywords"].asString());
        }
    }
}

void Airports::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 19)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            ident_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            type_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            latitudeDeg_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            longitudeDeg_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            elevationFt_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            continent_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            isoCountry_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            isoRegion_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            municipality_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            scheduledService_=std::make_shared<bool>(pJson[pMasqueradingVector[11]].asBool());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            icaoCode_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            iataCode_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            gpsCode_=std::make_shared<std::string>(pJson[pMasqueradingVector[14]].asString());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            localCode_=std::make_shared<std::string>(pJson[pMasqueradingVector[15]].asString());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            homeLink_=std::make_shared<std::string>(pJson[pMasqueradingVector[16]].asString());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            wikipediaLink_=std::make_shared<std::string>(pJson[pMasqueradingVector[17]].asString());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            keywords_=std::make_shared<std::string>(pJson[pMasqueradingVector[18]].asString());
        }
    }
}

void Airports::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("ident"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["ident"].isNull())
        {
            ident_=std::make_shared<std::string>(pJson["ident"].asString());
        }
    }
    if(pJson.isMember("type"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["type"].isNull())
        {
            type_=std::make_shared<std::string>(pJson["type"].asString());
        }
    }
    if(pJson.isMember("name"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("latitude_deg"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["latitude_deg"].isNull())
        {
            latitudeDeg_=std::make_shared<std::string>(pJson["latitude_deg"].asString());
        }
    }
    if(pJson.isMember("longitude_deg"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["longitude_deg"].isNull())
        {
            longitudeDeg_=std::make_shared<std::string>(pJson["longitude_deg"].asString());
        }
    }
    if(pJson.isMember("elevation_ft"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["elevation_ft"].isNull())
        {
            elevationFt_=std::make_shared<int32_t>((int32_t)pJson["elevation_ft"].asInt64());
        }
    }
    if(pJson.isMember("continent"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["continent"].isNull())
        {
            continent_=std::make_shared<std::string>(pJson["continent"].asString());
        }
    }
    if(pJson.isMember("iso_country"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["iso_country"].isNull())
        {
            isoCountry_=std::make_shared<std::string>(pJson["iso_country"].asString());
        }
    }
    if(pJson.isMember("iso_region"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["iso_region"].isNull())
        {
            isoRegion_=std::make_shared<std::string>(pJson["iso_region"].asString());
        }
    }
    if(pJson.isMember("municipality"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["municipality"].isNull())
        {
            municipality_=std::make_shared<std::string>(pJson["municipality"].asString());
        }
    }
    if(pJson.isMember("scheduled_service"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["scheduled_service"].isNull())
        {
            scheduledService_=std::make_shared<bool>(pJson["scheduled_service"].asBool());
        }
    }
    if(pJson.isMember("icao_code"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["icao_code"].isNull())
        {
            icaoCode_=std::make_shared<std::string>(pJson["icao_code"].asString());
        }
    }
    if(pJson.isMember("iata_code"))
    {
        dirtyFlag_[13] = true;
        if(!pJson["iata_code"].isNull())
        {
            iataCode_=std::make_shared<std::string>(pJson["iata_code"].asString());
        }
    }
    if(pJson.isMember("gps_code"))
    {
        dirtyFlag_[14] = true;
        if(!pJson["gps_code"].isNull())
        {
            gpsCode_=std::make_shared<std::string>(pJson["gps_code"].asString());
        }
    }
    if(pJson.isMember("local_code"))
    {
        dirtyFlag_[15] = true;
        if(!pJson["local_code"].isNull())
        {
            localCode_=std::make_shared<std::string>(pJson["local_code"].asString());
        }
    }
    if(pJson.isMember("home_link"))
    {
        dirtyFlag_[16] = true;
        if(!pJson["home_link"].isNull())
        {
            homeLink_=std::make_shared<std::string>(pJson["home_link"].asString());
        }
    }
    if(pJson.isMember("wikipedia_link"))
    {
        dirtyFlag_[17] = true;
        if(!pJson["wikipedia_link"].isNull())
        {
            wikipediaLink_=std::make_shared<std::string>(pJson["wikipedia_link"].asString());
        }
    }
    if(pJson.isMember("keywords"))
    {
        dirtyFlag_[18] = true;
        if(!pJson["keywords"].isNull())
        {
            keywords_=std::make_shared<std::string>(pJson["keywords"].asString());
        }
    }
}

const int32_t &Airports::getValueOfId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Airports::getId() const noexcept
{
    return id_;
}
void Airports::setId(const int32_t &pId) noexcept
{
    id_ = std::make_shared<int32_t>(pId);
    dirtyFlag_[0] = true;
}
const typename Airports::PrimaryKeyType & Airports::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &Airports::getValueOfIdent() const noexcept
{
    static const std::string defaultValue = std::string();
    if(ident_)
        return *ident_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Airports::getIdent() const noexcept
{
    return ident_;
}
void Airports::setIdent(const std::string &pIdent) noexcept
{
    ident_ = std::make_shared<std::string>(pIdent);
    dirtyFlag_[1] = true;
}
void Airports::setIdent(std::string &&pIdent) noexcept
{
    ident_ = std::make_shared<std::string>(std::move(pIdent));
    dirtyFlag_[1] = true;
}

const std::string &Airports::getValueOfType() const noexcept
{
    static const std::string defaultValue = std::string();
    if(type_)
        return *type_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Airports::getType() const noexcept
{
    return type_;
}
void Airports::setType(const std::string &pType) noexcept
{
    type_ = std::make_shared<std::string>(pType);
    dirtyFlag_[2] = true;
}
void Airports::setType(std::string &&pType) noexcept
{
    type_ = std::make_shared<std::string>(std::move(pType));
    dirtyFlag_[2] = true;
}

const std::string &Airports::getValueOfName() const noexcept
{
    static const std::string defaultValue = std::string();
    if(name_)
        return *name_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Airports::getName() const noexcept
{
    return name_;
}
void Airports::setName(const std::string &pName) noexcept
{
    name_ = std::make_shared<std::string>(pName);
    dirtyFlag_[3] = true;
}
void Airports::setName(std::string &&pName) noexcept
{
    name_ = std::make_shared<std::string>(std::move(pName));
    dirtyFlag_[3] = true;
}

const std::string &Airports::getValueOfLatitudeDeg() const noexcept
{
    static const std::string defaultValue = std::string();
    if(latitudeDeg_)
        return *latitudeDeg_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Airports::getLatitudeDeg() const noexcept
{
    return latitudeDeg_;
}
void Airports::setLatitudeDeg(const std::string &pLatitudeDeg) noexcept
{
    latitudeDeg_ = std::make_shared<std::string>(pLatitudeDeg);
    dirtyFlag_[4] = true;
}
void Airports::setLatitudeDeg(std::string &&pLatitudeDeg) noexcept
{
    latitudeDeg_ = std::make_shared<std::string>(std::move(pLatitudeDeg));
    dirtyFlag_[4] = true;
}

const std::string &Airports::getValueOfLongitudeDeg() const noexcept
{
    static const std::string defaultValue = std::string();
    if(longitudeDeg_)
        return *longitudeDeg_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Airports::getLongitudeDeg() const noexcept
{
    return longitudeDeg_;
}
void Airports::setLongitudeDeg(const std::string &pLongitudeDeg) noexcept
{
    longitudeDeg_ = std::make_shared<std::string>(pLongitudeDeg);
    dirtyFlag_[5] = true;
}
void Airports::setLongitudeDeg(std::string &&pLongitudeDeg) noexcept
{
    longitudeDeg_ = std::make_shared<std::string>(std::move(pLongitudeDeg));
    dirtyFlag_[5] = true;
}

const int32_t &Airports::getValueOfElevationFt() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(elevationFt_)
        return *elevationFt_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Airports::getElevationFt() const noexcept
{
    return elevationFt_;
}
void Airports::setElevationFt(const int32_t &pElevationFt) noexcept
{
    elevationFt_ = std::make_shared<int32_t>(pElevationFt);
    dirtyFlag_[6] = true;
}
void Airports::setElevationFtToNull() noexcept
{
    elevationFt_.reset();
    dirtyFlag_[6] = true;
}

const std::string &Airports::getValueOfContinent() const noexcept
{
    static const std::string defaultValue = std::string();
    if(continent_)
        return *continent_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Airports::getContinent() const noexcept
{
    return continent_;
}
void Airports::setContinent(const std::string &pContinent) noexcept
{
    continent_ = std::make_shared<std::string>(pContinent);
    dirtyFlag_[7] = true;
}
void Airports::setContinent(std::string &&pContinent) noexcept
{
    continent_ = std::make_shared<std::string>(std::move(pContinent));
    dirtyFlag_[7] = true;
}
void Airports::setContinentToNull() noexcept
{
    continent_.reset();
    dirtyFlag_[7] = true;
}

const std::string &Airports::getValueOfIsoCountry() const noexcept
{
    static const std::string defaultValue = std::string();
    if(isoCountry_)
        return *isoCountry_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Airports::getIsoCountry() const noexcept
{
    return isoCountry_;
}
void Airports::setIsoCountry(const std::string &pIsoCountry) noexcept
{
    isoCountry_ = std::make_shared<std::string>(pIsoCountry);
    dirtyFlag_[8] = true;
}
void Airports::setIsoCountry(std::string &&pIsoCountry) noexcept
{
    isoCountry_ = std::make_shared<std::string>(std::move(pIsoCountry));
    dirtyFlag_[8] = true;
}

const std::string &Airports::getValueOfIsoRegion() const noexcept
{
    static const std::string defaultValue = std::string();
    if(isoRegion_)
        return *isoRegion_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Airports::getIsoRegion() const noexcept
{
    return isoRegion_;
}
void Airports::setIsoRegion(const std::string &pIsoRegion) noexcept
{
    isoRegion_ = std::make_shared<std::string>(pIsoRegion);
    dirtyFlag_[9] = true;
}
void Airports::setIsoRegion(std::string &&pIsoRegion) noexcept
{
    isoRegion_ = std::make_shared<std::string>(std::move(pIsoRegion));
    dirtyFlag_[9] = true;
}

const std::string &Airports::getValueOfMunicipality() const noexcept
{
    static const std::string defaultValue = std::string();
    if(municipality_)
        return *municipality_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Airports::getMunicipality() const noexcept
{
    return municipality_;
}
void Airports::setMunicipality(const std::string &pMunicipality) noexcept
{
    municipality_ = std::make_shared<std::string>(pMunicipality);
    dirtyFlag_[10] = true;
}
void Airports::setMunicipality(std::string &&pMunicipality) noexcept
{
    municipality_ = std::make_shared<std::string>(std::move(pMunicipality));
    dirtyFlag_[10] = true;
}
void Airports::setMunicipalityToNull() noexcept
{
    municipality_.reset();
    dirtyFlag_[10] = true;
}

const bool &Airports::getValueOfScheduledService() const noexcept
{
    static const bool defaultValue = bool();
    if(scheduledService_)
        return *scheduledService_;
    return defaultValue;
}
const std::shared_ptr<bool> &Airports::getScheduledService() const noexcept
{
    return scheduledService_;
}
void Airports::setScheduledService(const bool &pScheduledService) noexcept
{
    scheduledService_ = std::make_shared<bool>(pScheduledService);
    dirtyFlag_[11] = true;
}

const std::string &Airports::getValueOfIcaoCode() const noexcept
{
    static const std::string defaultValue = std::string();
    if(icaoCode_)
        return *icaoCode_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Airports::getIcaoCode() const noexcept
{
    return icaoCode_;
}
void Airports::setIcaoCode(const std::string &pIcaoCode) noexcept
{
    icaoCode_ = std::make_shared<std::string>(pIcaoCode);
    dirtyFlag_[12] = true;
}
void Airports::setIcaoCode(std::string &&pIcaoCode) noexcept
{
    icaoCode_ = std::make_shared<std::string>(std::move(pIcaoCode));
    dirtyFlag_[12] = true;
}
void Airports::setIcaoCodeToNull() noexcept
{
    icaoCode_.reset();
    dirtyFlag_[12] = true;
}

const std::string &Airports::getValueOfIataCode() const noexcept
{
    static const std::string defaultValue = std::string();
    if(iataCode_)
        return *iataCode_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Airports::getIataCode() const noexcept
{
    return iataCode_;
}
void Airports::setIataCode(const std::string &pIataCode) noexcept
{
    iataCode_ = std::make_shared<std::string>(pIataCode);
    dirtyFlag_[13] = true;
}
void Airports::setIataCode(std::string &&pIataCode) noexcept
{
    iataCode_ = std::make_shared<std::string>(std::move(pIataCode));
    dirtyFlag_[13] = true;
}
void Airports::setIataCodeToNull() noexcept
{
    iataCode_.reset();
    dirtyFlag_[13] = true;
}

const std::string &Airports::getValueOfGpsCode() const noexcept
{
    static const std::string defaultValue = std::string();
    if(gpsCode_)
        return *gpsCode_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Airports::getGpsCode() const noexcept
{
    return gpsCode_;
}
void Airports::setGpsCode(const std::string &pGpsCode) noexcept
{
    gpsCode_ = std::make_shared<std::string>(pGpsCode);
    dirtyFlag_[14] = true;
}
void Airports::setGpsCode(std::string &&pGpsCode) noexcept
{
    gpsCode_ = std::make_shared<std::string>(std::move(pGpsCode));
    dirtyFlag_[14] = true;
}
void Airports::setGpsCodeToNull() noexcept
{
    gpsCode_.reset();
    dirtyFlag_[14] = true;
}

const std::string &Airports::getValueOfLocalCode() const noexcept
{
    static const std::string defaultValue = std::string();
    if(localCode_)
        return *localCode_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Airports::getLocalCode() const noexcept
{
    return localCode_;
}
void Airports::setLocalCode(const std::string &pLocalCode) noexcept
{
    localCode_ = std::make_shared<std::string>(pLocalCode);
    dirtyFlag_[15] = true;
}
void Airports::setLocalCode(std::string &&pLocalCode) noexcept
{
    localCode_ = std::make_shared<std::string>(std::move(pLocalCode));
    dirtyFlag_[15] = true;
}
void Airports::setLocalCodeToNull() noexcept
{
    localCode_.reset();
    dirtyFlag_[15] = true;
}

const std::string &Airports::getValueOfHomeLink() const noexcept
{
    static const std::string defaultValue = std::string();
    if(homeLink_)
        return *homeLink_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Airports::getHomeLink() const noexcept
{
    return homeLink_;
}
void Airports::setHomeLink(const std::string &pHomeLink) noexcept
{
    homeLink_ = std::make_shared<std::string>(pHomeLink);
    dirtyFlag_[16] = true;
}
void Airports::setHomeLink(std::string &&pHomeLink) noexcept
{
    homeLink_ = std::make_shared<std::string>(std::move(pHomeLink));
    dirtyFlag_[16] = true;
}
void Airports::setHomeLinkToNull() noexcept
{
    homeLink_.reset();
    dirtyFlag_[16] = true;
}

const std::string &Airports::getValueOfWikipediaLink() const noexcept
{
    static const std::string defaultValue = std::string();
    if(wikipediaLink_)
        return *wikipediaLink_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Airports::getWikipediaLink() const noexcept
{
    return wikipediaLink_;
}
void Airports::setWikipediaLink(const std::string &pWikipediaLink) noexcept
{
    wikipediaLink_ = std::make_shared<std::string>(pWikipediaLink);
    dirtyFlag_[17] = true;
}
void Airports::setWikipediaLink(std::string &&pWikipediaLink) noexcept
{
    wikipediaLink_ = std::make_shared<std::string>(std::move(pWikipediaLink));
    dirtyFlag_[17] = true;
}
void Airports::setWikipediaLinkToNull() noexcept
{
    wikipediaLink_.reset();
    dirtyFlag_[17] = true;
}

const std::string &Airports::getValueOfKeywords() const noexcept
{
    static const std::string defaultValue = std::string();
    if(keywords_)
        return *keywords_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Airports::getKeywords() const noexcept
{
    return keywords_;
}
void Airports::setKeywords(const std::string &pKeywords) noexcept
{
    keywords_ = std::make_shared<std::string>(pKeywords);
    dirtyFlag_[18] = true;
}
void Airports::setKeywords(std::string &&pKeywords) noexcept
{
    keywords_ = std::make_shared<std::string>(std::move(pKeywords));
    dirtyFlag_[18] = true;
}
void Airports::setKeywordsToNull() noexcept
{
    keywords_.reset();
    dirtyFlag_[18] = true;
}

void Airports::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Airports::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "id",
        "ident",
        "type",
        "name",
        "latitude_deg",
        "longitude_deg",
        "elevation_ft",
        "continent",
        "iso_country",
        "iso_region",
        "municipality",
        "scheduled_service",
        "icao_code",
        "iata_code",
        "gps_code",
        "local_code",
        "home_link",
        "wikipedia_link",
        "keywords"
    };
    return inCols;
}

void Airports::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getIdent())
        {
            binder << getValueOfIdent();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getLatitudeDeg())
        {
            binder << getValueOfLatitudeDeg();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getLongitudeDeg())
        {
            binder << getValueOfLongitudeDeg();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getElevationFt())
        {
            binder << getValueOfElevationFt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getContinent())
        {
            binder << getValueOfContinent();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getIsoCountry())
        {
            binder << getValueOfIsoCountry();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getIsoRegion())
        {
            binder << getValueOfIsoRegion();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getMunicipality())
        {
            binder << getValueOfMunicipality();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getScheduledService())
        {
            binder << getValueOfScheduledService();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getIcaoCode())
        {
            binder << getValueOfIcaoCode();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getIataCode())
        {
            binder << getValueOfIataCode();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getGpsCode())
        {
            binder << getValueOfGpsCode();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getLocalCode())
        {
            binder << getValueOfLocalCode();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getHomeLink())
        {
            binder << getValueOfHomeLink();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getWikipediaLink())
        {
            binder << getValueOfWikipediaLink();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getKeywords())
        {
            binder << getValueOfKeywords();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Airports::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    if(dirtyFlag_[13])
    {
        ret.push_back(getColumnName(13));
    }
    if(dirtyFlag_[14])
    {
        ret.push_back(getColumnName(14));
    }
    if(dirtyFlag_[15])
    {
        ret.push_back(getColumnName(15));
    }
    if(dirtyFlag_[16])
    {
        ret.push_back(getColumnName(16));
    }
    if(dirtyFlag_[17])
    {
        ret.push_back(getColumnName(17));
    }
    if(dirtyFlag_[18])
    {
        ret.push_back(getColumnName(18));
    }
    return ret;
}

void Airports::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getIdent())
        {
            binder << getValueOfIdent();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getLatitudeDeg())
        {
            binder << getValueOfLatitudeDeg();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getLongitudeDeg())
        {
            binder << getValueOfLongitudeDeg();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getElevationFt())
        {
            binder << getValueOfElevationFt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getContinent())
        {
            binder << getValueOfContinent();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getIsoCountry())
        {
            binder << getValueOfIsoCountry();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getIsoRegion())
        {
            binder << getValueOfIsoRegion();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getMunicipality())
        {
            binder << getValueOfMunicipality();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getScheduledService())
        {
            binder << getValueOfScheduledService();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getIcaoCode())
        {
            binder << getValueOfIcaoCode();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getIataCode())
        {
            binder << getValueOfIataCode();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getGpsCode())
        {
            binder << getValueOfGpsCode();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getLocalCode())
        {
            binder << getValueOfLocalCode();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getHomeLink())
        {
            binder << getValueOfHomeLink();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getWikipediaLink())
        {
            binder << getValueOfWikipediaLink();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getKeywords())
        {
            binder << getValueOfKeywords();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Airports::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getIdent())
    {
        ret["ident"]=getValueOfIdent();
    }
    else
    {
        ret["ident"]=Json::Value();
    }
    if(getType())
    {
        ret["type"]=getValueOfType();
    }
    else
    {
        ret["type"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getLatitudeDeg())
    {
        ret["latitude_deg"]=getValueOfLatitudeDeg();
    }
    else
    {
        ret["latitude_deg"]=Json::Value();
    }
    if(getLongitudeDeg())
    {
        ret["longitude_deg"]=getValueOfLongitudeDeg();
    }
    else
    {
        ret["longitude_deg"]=Json::Value();
    }
    if(getElevationFt())
    {
        ret["elevation_ft"]=getValueOfElevationFt();
    }
    else
    {
        ret["elevation_ft"]=Json::Value();
    }
    if(getContinent())
    {
        ret["continent"]=getValueOfContinent();
    }
    else
    {
        ret["continent"]=Json::Value();
    }
    if(getIsoCountry())
    {
        ret["iso_country"]=getValueOfIsoCountry();
    }
    else
    {
        ret["iso_country"]=Json::Value();
    }
    if(getIsoRegion())
    {
        ret["iso_region"]=getValueOfIsoRegion();
    }
    else
    {
        ret["iso_region"]=Json::Value();
    }
    if(getMunicipality())
    {
        ret["municipality"]=getValueOfMunicipality();
    }
    else
    {
        ret["municipality"]=Json::Value();
    }
    if(getScheduledService())
    {
        ret["scheduled_service"]=getValueOfScheduledService();
    }
    else
    {
        ret["scheduled_service"]=Json::Value();
    }
    if(getIcaoCode())
    {
        ret["icao_code"]=getValueOfIcaoCode();
    }
    else
    {
        ret["icao_code"]=Json::Value();
    }
    if(getIataCode())
    {
        ret["iata_code"]=getValueOfIataCode();
    }
    else
    {
        ret["iata_code"]=Json::Value();
    }
    if(getGpsCode())
    {
        ret["gps_code"]=getValueOfGpsCode();
    }
    else
    {
        ret["gps_code"]=Json::Value();
    }
    if(getLocalCode())
    {
        ret["local_code"]=getValueOfLocalCode();
    }
    else
    {
        ret["local_code"]=Json::Value();
    }
    if(getHomeLink())
    {
        ret["home_link"]=getValueOfHomeLink();
    }
    else
    {
        ret["home_link"]=Json::Value();
    }
    if(getWikipediaLink())
    {
        ret["wikipedia_link"]=getValueOfWikipediaLink();
    }
    else
    {
        ret["wikipedia_link"]=Json::Value();
    }
    if(getKeywords())
    {
        ret["keywords"]=getValueOfKeywords();
    }
    else
    {
        ret["keywords"]=Json::Value();
    }
    return ret;
}

Json::Value Airports::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 19)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getIdent())
            {
                ret[pMasqueradingVector[1]]=getValueOfIdent();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getType())
            {
                ret[pMasqueradingVector[2]]=getValueOfType();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getName())
            {
                ret[pMasqueradingVector[3]]=getValueOfName();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getLatitudeDeg())
            {
                ret[pMasqueradingVector[4]]=getValueOfLatitudeDeg();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getLongitudeDeg())
            {
                ret[pMasqueradingVector[5]]=getValueOfLongitudeDeg();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getElevationFt())
            {
                ret[pMasqueradingVector[6]]=getValueOfElevationFt();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getContinent())
            {
                ret[pMasqueradingVector[7]]=getValueOfContinent();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getIsoCountry())
            {
                ret[pMasqueradingVector[8]]=getValueOfIsoCountry();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getIsoRegion())
            {
                ret[pMasqueradingVector[9]]=getValueOfIsoRegion();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getMunicipality())
            {
                ret[pMasqueradingVector[10]]=getValueOfMunicipality();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getScheduledService())
            {
                ret[pMasqueradingVector[11]]=getValueOfScheduledService();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getIcaoCode())
            {
                ret[pMasqueradingVector[12]]=getValueOfIcaoCode();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getIataCode())
            {
                ret[pMasqueradingVector[13]]=getValueOfIataCode();
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[14].empty())
        {
            if(getGpsCode())
            {
                ret[pMasqueradingVector[14]]=getValueOfGpsCode();
            }
            else
            {
                ret[pMasqueradingVector[14]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[15].empty())
        {
            if(getLocalCode())
            {
                ret[pMasqueradingVector[15]]=getValueOfLocalCode();
            }
            else
            {
                ret[pMasqueradingVector[15]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[16].empty())
        {
            if(getHomeLink())
            {
                ret[pMasqueradingVector[16]]=getValueOfHomeLink();
            }
            else
            {
                ret[pMasqueradingVector[16]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[17].empty())
        {
            if(getWikipediaLink())
            {
                ret[pMasqueradingVector[17]]=getValueOfWikipediaLink();
            }
            else
            {
                ret[pMasqueradingVector[17]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[18].empty())
        {
            if(getKeywords())
            {
                ret[pMasqueradingVector[18]]=getValueOfKeywords();
            }
            else
            {
                ret[pMasqueradingVector[18]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getIdent())
    {
        ret["ident"]=getValueOfIdent();
    }
    else
    {
        ret["ident"]=Json::Value();
    }
    if(getType())
    {
        ret["type"]=getValueOfType();
    }
    else
    {
        ret["type"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getLatitudeDeg())
    {
        ret["latitude_deg"]=getValueOfLatitudeDeg();
    }
    else
    {
        ret["latitude_deg"]=Json::Value();
    }
    if(getLongitudeDeg())
    {
        ret["longitude_deg"]=getValueOfLongitudeDeg();
    }
    else
    {
        ret["longitude_deg"]=Json::Value();
    }
    if(getElevationFt())
    {
        ret["elevation_ft"]=getValueOfElevationFt();
    }
    else
    {
        ret["elevation_ft"]=Json::Value();
    }
    if(getContinent())
    {
        ret["continent"]=getValueOfContinent();
    }
    else
    {
        ret["continent"]=Json::Value();
    }
    if(getIsoCountry())
    {
        ret["iso_country"]=getValueOfIsoCountry();
    }
    else
    {
        ret["iso_country"]=Json::Value();
    }
    if(getIsoRegion())
    {
        ret["iso_region"]=getValueOfIsoRegion();
    }
    else
    {
        ret["iso_region"]=Json::Value();
    }
    if(getMunicipality())
    {
        ret["municipality"]=getValueOfMunicipality();
    }
    else
    {
        ret["municipality"]=Json::Value();
    }
    if(getScheduledService())
    {
        ret["scheduled_service"]=getValueOfScheduledService();
    }
    else
    {
        ret["scheduled_service"]=Json::Value();
    }
    if(getIcaoCode())
    {
        ret["icao_code"]=getValueOfIcaoCode();
    }
    else
    {
        ret["icao_code"]=Json::Value();
    }
    if(getIataCode())
    {
        ret["iata_code"]=getValueOfIataCode();
    }
    else
    {
        ret["iata_code"]=Json::Value();
    }
    if(getGpsCode())
    {
        ret["gps_code"]=getValueOfGpsCode();
    }
    else
    {
        ret["gps_code"]=Json::Value();
    }
    if(getLocalCode())
    {
        ret["local_code"]=getValueOfLocalCode();
    }
    else
    {
        ret["local_code"]=Json::Value();
    }
    if(getHomeLink())
    {
        ret["home_link"]=getValueOfHomeLink();
    }
    else
    {
        ret["home_link"]=Json::Value();
    }
    if(getWikipediaLink())
    {
        ret["wikipedia_link"]=getValueOfWikipediaLink();
    }
    else
    {
        ret["wikipedia_link"]=Json::Value();
    }
    if(getKeywords())
    {
        ret["keywords"]=getValueOfKeywords();
    }
    else
    {
        ret["keywords"]=Json::Value();
    }
    return ret;
}

bool Airports::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    else
    {
        err="The id column cannot be null";
        return false;
    }
    if(pJson.isMember("ident"))
    {
        if(!validJsonOfField(1, "ident", pJson["ident"], err, true))
            return false;
    }
    else
    {
        err="The ident column cannot be null";
        return false;
    }
    if(pJson.isMember("type"))
    {
        if(!validJsonOfField(2, "type", pJson["type"], err, true))
            return false;
    }
    else
    {
        err="The type column cannot be null";
        return false;
    }
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(3, "name", pJson["name"], err, true))
            return false;
    }
    else
    {
        err="The name column cannot be null";
        return false;
    }
    if(pJson.isMember("latitude_deg"))
    {
        if(!validJsonOfField(4, "latitude_deg", pJson["latitude_deg"], err, true))
            return false;
    }
    else
    {
        err="The latitude_deg column cannot be null";
        return false;
    }
    if(pJson.isMember("longitude_deg"))
    {
        if(!validJsonOfField(5, "longitude_deg", pJson["longitude_deg"], err, true))
            return false;
    }
    else
    {
        err="The longitude_deg column cannot be null";
        return false;
    }
    if(pJson.isMember("elevation_ft"))
    {
        if(!validJsonOfField(6, "elevation_ft", pJson["elevation_ft"], err, true))
            return false;
    }
    if(pJson.isMember("continent"))
    {
        if(!validJsonOfField(7, "continent", pJson["continent"], err, true))
            return false;
    }
    if(pJson.isMember("iso_country"))
    {
        if(!validJsonOfField(8, "iso_country", pJson["iso_country"], err, true))
            return false;
    }
    else
    {
        err="The iso_country column cannot be null";
        return false;
    }
    if(pJson.isMember("iso_region"))
    {
        if(!validJsonOfField(9, "iso_region", pJson["iso_region"], err, true))
            return false;
    }
    else
    {
        err="The iso_region column cannot be null";
        return false;
    }
    if(pJson.isMember("municipality"))
    {
        if(!validJsonOfField(10, "municipality", pJson["municipality"], err, true))
            return false;
    }
    if(pJson.isMember("scheduled_service"))
    {
        if(!validJsonOfField(11, "scheduled_service", pJson["scheduled_service"], err, true))
            return false;
    }
    else
    {
        err="The scheduled_service column cannot be null";
        return false;
    }
    if(pJson.isMember("icao_code"))
    {
        if(!validJsonOfField(12, "icao_code", pJson["icao_code"], err, true))
            return false;
    }
    if(pJson.isMember("iata_code"))
    {
        if(!validJsonOfField(13, "iata_code", pJson["iata_code"], err, true))
            return false;
    }
    if(pJson.isMember("gps_code"))
    {
        if(!validJsonOfField(14, "gps_code", pJson["gps_code"], err, true))
            return false;
    }
    if(pJson.isMember("local_code"))
    {
        if(!validJsonOfField(15, "local_code", pJson["local_code"], err, true))
            return false;
    }
    if(pJson.isMember("home_link"))
    {
        if(!validJsonOfField(16, "home_link", pJson["home_link"], err, true))
            return false;
    }
    if(pJson.isMember("wikipedia_link"))
    {
        if(!validJsonOfField(17, "wikipedia_link", pJson["wikipedia_link"], err, true))
            return false;
    }
    if(pJson.isMember("keywords"))
    {
        if(!validJsonOfField(18, "keywords", pJson["keywords"], err, true))
            return false;
    }
    return true;
}
bool Airports::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                  const std::vector<std::string> &pMasqueradingVector,
                                                  std::string &err)
{
    if(pMasqueradingVector.size() != 19)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[5] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[8] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[9] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[10].empty())
      {
          if(pJson.isMember(pMasqueradingVector[10]))
          {
              if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[11].empty())
      {
          if(pJson.isMember(pMasqueradingVector[11]))
          {
              if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[11] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[12].empty())
      {
          if(pJson.isMember(pMasqueradingVector[12]))
          {
              if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[13].empty())
      {
          if(pJson.isMember(pMasqueradingVector[13]))
          {
              if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[14].empty())
      {
          if(pJson.isMember(pMasqueradingVector[14]))
          {
              if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[15].empty())
      {
          if(pJson.isMember(pMasqueradingVector[15]))
          {
              if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[16].empty())
      {
          if(pJson.isMember(pMasqueradingVector[16]))
          {
              if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[17].empty())
      {
          if(pJson.isMember(pMasqueradingVector[17]))
          {
              if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[18].empty())
      {
          if(pJson.isMember(pMasqueradingVector[18]))
          {
              if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Airports::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("ident"))
    {
        if(!validJsonOfField(1, "ident", pJson["ident"], err, false))
            return false;
    }
    if(pJson.isMember("type"))
    {
        if(!validJsonOfField(2, "type", pJson["type"], err, false))
            return false;
    }
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(3, "name", pJson["name"], err, false))
            return false;
    }
    if(pJson.isMember("latitude_deg"))
    {
        if(!validJsonOfField(4, "latitude_deg", pJson["latitude_deg"], err, false))
            return false;
    }
    if(pJson.isMember("longitude_deg"))
    {
        if(!validJsonOfField(5, "longitude_deg", pJson["longitude_deg"], err, false))
            return false;
    }
    if(pJson.isMember("elevation_ft"))
    {
        if(!validJsonOfField(6, "elevation_ft", pJson["elevation_ft"], err, false))
            return false;
    }
    if(pJson.isMember("continent"))
    {
        if(!validJsonOfField(7, "continent", pJson["continent"], err, false))
            return false;
    }
    if(pJson.isMember("iso_country"))
    {
        if(!validJsonOfField(8, "iso_country", pJson["iso_country"], err, false))
            return false;
    }
    if(pJson.isMember("iso_region"))
    {
        if(!validJsonOfField(9, "iso_region", pJson["iso_region"], err, false))
            return false;
    }
    if(pJson.isMember("municipality"))
    {
        if(!validJsonOfField(10, "municipality", pJson["municipality"], err, false))
            return false;
    }
    if(pJson.isMember("scheduled_service"))
    {
        if(!validJsonOfField(11, "scheduled_service", pJson["scheduled_service"], err, false))
            return false;
    }
    if(pJson.isMember("icao_code"))
    {
        if(!validJsonOfField(12, "icao_code", pJson["icao_code"], err, false))
            return false;
    }
    if(pJson.isMember("iata_code"))
    {
        if(!validJsonOfField(13, "iata_code", pJson["iata_code"], err, false))
            return false;
    }
    if(pJson.isMember("gps_code"))
    {
        if(!validJsonOfField(14, "gps_code", pJson["gps_code"], err, false))
            return false;
    }
    if(pJson.isMember("local_code"))
    {
        if(!validJsonOfField(15, "local_code", pJson["local_code"], err, false))
            return false;
    }
    if(pJson.isMember("home_link"))
    {
        if(!validJsonOfField(16, "home_link", pJson["home_link"], err, false))
            return false;
    }
    if(pJson.isMember("wikipedia_link"))
    {
        if(!validJsonOfField(17, "wikipedia_link", pJson["wikipedia_link"], err, false))
            return false;
    }
    if(pJson.isMember("keywords"))
    {
        if(!validJsonOfField(18, "keywords", pJson["keywords"], err, false))
            return false;
    }
    return true;
}
bool Airports::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                std::string &err)
{
    if(pMasqueradingVector.size() != 19)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
      if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
      {
          if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
              return false;
      }
      if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
      {
          if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
              return false;
      }
      if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
      {
          if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
              return false;
      }
      if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
      {
          if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
              return false;
      }
      if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
      {
          if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, false))
              return false;
      }
      if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
      {
          if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, false))
              return false;
      }
      if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
      {
          if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, false))
              return false;
      }
      if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
      {
          if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, false))
              return false;
      }
      if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
      {
          if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Airports::validJsonOfField(size_t index,
                                const std::string &fieldName,
                                const Json::Value &pJson,
                                std::string &err,
                                bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 10)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 10)";
                return false;
            }

            break;
        case 8:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 10)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 10)";
                return false;
            }

            break;
        case 10:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 100)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 100)";
                return false;
            }

            break;
        case 11:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isBool())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 12:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 4)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 4)";
                return false;
            }

            break;
        case 13:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 3)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 3)";
                return false;
            }

            break;
        case 14:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 4)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 4)";
                return false;
            }

            break;
        case 15:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 10)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 10)";
                return false;
            }

            break;
        case 16:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 17:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 18:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
