/**
 *
 *  Flights.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Flights.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::mydatabase;

const std::string Flights::Cols::_id = "\"id\"";
const std::string Flights::Cols::_user_id = "\"user_id\"";
const std::string Flights::Cols::_departure_airport_id = "\"departure_airport_id\"";
const std::string Flights::Cols::_arrival_airport_id = "\"arrival_airport_id\"";
const std::string Flights::Cols::_flight_date = "\"flight_date\"";
const std::string Flights::Cols::_flight_duration = "\"flight_duration\"";
const std::string Flights::Cols::_distance = "\"distance\"";
const std::string Flights::Cols::_route_path = "\"route_path\"";
const std::string Flights::Cols::_flight_number = "\"flight_number\"";
const std::string Flights::Cols::_airplane_type = "\"airplane_type\"";
const std::string Flights::Cols::_airplane_registration = "\"airplane_registration\"";
const std::string Flights::Cols::_seat = "\"seat\"";
const std::string Flights::Cols::_seat_type = "\"seat_type\"";
const std::string Flights::Cols::_flight_class = "\"flight_class\"";
const std::string Flights::Cols::_flight_reason = "\"flight_reason\"";
const std::string Flights::Cols::_created_at = "\"created_at\"";
const std::string Flights::Cols::_edited_at = "\"edited_at\"";
const std::string Flights::primaryKeyName = "id";
const bool Flights::hasPrimaryKey = true;
const std::string Flights::tableName = "\"flights\"";

const std::vector<typename Flights::MetaData> Flights::metaData_={
{"id","int32_t","integer",4,1,1,1},
{"user_id","int32_t","integer",4,0,0,1},
{"departure_airport_id","int32_t","integer",4,0,0,1},
{"arrival_airport_id","int32_t","integer",4,0,0,1},
{"flight_date","::trantor::Date","timestamp with time zone",0,0,0,1},
{"flight_duration","std::string","interval",0,0,0,0},
{"distance","int32_t","integer",4,0,0,0},
{"route_path","std::string","jsonb",0,0,0,0},
{"flight_number","std::string","character varying",20,0,0,0},
{"airplane_type","std::string","character varying",50,0,0,0},
{"airplane_registration","std::string","character varying",20,0,0,0},
{"seat","std::string","character varying",4,0,0,0},
{"seat_type","std::string","USER-DEFINED",0,0,0,0},
{"flight_class","std::string","USER-DEFINED",0,0,0,0},
{"flight_reason","std::string","USER-DEFINED",0,0,0,0},
{"created_at","::trantor::Date","timestamp with time zone",0,0,0,1},
{"edited_at","::trantor::Date","timestamp with time zone",0,0,0,1}
};
const std::string &Flights::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Flights::Flights(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["user_id"].isNull())
        {
            userId_=std::make_shared<int32_t>(r["user_id"].as<int32_t>());
        }
        if(!r["departure_airport_id"].isNull())
        {
            departureAirportId_=std::make_shared<int32_t>(r["departure_airport_id"].as<int32_t>());
        }
        if(!r["arrival_airport_id"].isNull())
        {
            arrivalAirportId_=std::make_shared<int32_t>(r["arrival_airport_id"].as<int32_t>());
        }
        if(!r["flight_date"].isNull())
        {
            auto timeStr = r["flight_date"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                flightDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["flight_duration"].isNull())
        {
            flightDuration_=std::make_shared<std::string>(r["flight_duration"].as<std::string>());
        }
        if(!r["distance"].isNull())
        {
            distance_=std::make_shared<int32_t>(r["distance"].as<int32_t>());
        }
        if(!r["route_path"].isNull())
        {
            routePath_=std::make_shared<std::string>(r["route_path"].as<std::string>());
        }
        if(!r["flight_number"].isNull())
        {
            flightNumber_=std::make_shared<std::string>(r["flight_number"].as<std::string>());
        }
        if(!r["airplane_type"].isNull())
        {
            airplaneType_=std::make_shared<std::string>(r["airplane_type"].as<std::string>());
        }
        if(!r["airplane_registration"].isNull())
        {
            airplaneRegistration_=std::make_shared<std::string>(r["airplane_registration"].as<std::string>());
        }
        if(!r["seat"].isNull())
        {
            seat_=std::make_shared<std::string>(r["seat"].as<std::string>());
        }
        if(!r["seat_type"].isNull())
        {
            seatType_=std::make_shared<std::string>(r["seat_type"].as<std::string>());
        }
        if(!r["flight_class"].isNull())
        {
            flightClass_=std::make_shared<std::string>(r["flight_class"].as<std::string>());
        }
        if(!r["flight_reason"].isNull())
        {
            flightReason_=std::make_shared<std::string>(r["flight_reason"].as<std::string>());
        }
        if(!r["created_at"].isNull())
        {
            auto timeStr = r["created_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["edited_at"].isNull())
        {
            auto timeStr = r["edited_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                editedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 17 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            userId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            departureAirportId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            arrivalAirportId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                flightDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            flightDuration_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            distance_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            routePath_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            flightNumber_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            airplaneType_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            airplaneRegistration_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            seat_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            seatType_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            flightClass_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 14;
        if(!r[index].isNull())
        {
            flightReason_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 15;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 16;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                editedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }

}

Flights::Flights(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 17)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            userId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            departureAirportId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            arrivalAirportId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[4]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                flightDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            flightDuration_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            distance_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            routePath_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            flightNumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            airplaneType_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            airplaneRegistration_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            seat_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            seatType_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            flightClass_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            flightReason_=std::make_shared<std::string>(pJson[pMasqueradingVector[14]].asString());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[15]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[16]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                editedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

Flights::Flights(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("user_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["user_id"].isNull())
        {
            userId_=std::make_shared<int32_t>((int32_t)pJson["user_id"].asInt64());
        }
    }
    if(pJson.isMember("departure_airport_id"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["departure_airport_id"].isNull())
        {
            departureAirportId_=std::make_shared<int32_t>((int32_t)pJson["departure_airport_id"].asInt64());
        }
    }
    if(pJson.isMember("arrival_airport_id"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["arrival_airport_id"].isNull())
        {
            arrivalAirportId_=std::make_shared<int32_t>((int32_t)pJson["arrival_airport_id"].asInt64());
        }
    }
    if(pJson.isMember("flight_date"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["flight_date"].isNull())
        {
            auto timeStr = pJson["flight_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                flightDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("flight_duration"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["flight_duration"].isNull())
        {
            flightDuration_=std::make_shared<std::string>(pJson["flight_duration"].asString());
        }
    }
    if(pJson.isMember("distance"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["distance"].isNull())
        {
            distance_=std::make_shared<int32_t>((int32_t)pJson["distance"].asInt64());
        }
    }
    if(pJson.isMember("route_path"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["route_path"].isNull())
        {
            routePath_=std::make_shared<std::string>(pJson["route_path"].asString());
        }
    }
    if(pJson.isMember("flight_number"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["flight_number"].isNull())
        {
            flightNumber_=std::make_shared<std::string>(pJson["flight_number"].asString());
        }
    }
    if(pJson.isMember("airplane_type"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["airplane_type"].isNull())
        {
            airplaneType_=std::make_shared<std::string>(pJson["airplane_type"].asString());
        }
    }
    if(pJson.isMember("airplane_registration"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["airplane_registration"].isNull())
        {
            airplaneRegistration_=std::make_shared<std::string>(pJson["airplane_registration"].asString());
        }
    }
    if(pJson.isMember("seat"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["seat"].isNull())
        {
            seat_=std::make_shared<std::string>(pJson["seat"].asString());
        }
    }
    if(pJson.isMember("seat_type"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["seat_type"].isNull())
        {
            seatType_=std::make_shared<std::string>(pJson["seat_type"].asString());
        }
    }
    if(pJson.isMember("flight_class"))
    {
        dirtyFlag_[13]=true;
        if(!pJson["flight_class"].isNull())
        {
            flightClass_=std::make_shared<std::string>(pJson["flight_class"].asString());
        }
    }
    if(pJson.isMember("flight_reason"))
    {
        dirtyFlag_[14]=true;
        if(!pJson["flight_reason"].isNull())
        {
            flightReason_=std::make_shared<std::string>(pJson["flight_reason"].asString());
        }
    }
    if(pJson.isMember("created_at"))
    {
        dirtyFlag_[15]=true;
        if(!pJson["created_at"].isNull())
        {
            auto timeStr = pJson["created_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("edited_at"))
    {
        dirtyFlag_[16]=true;
        if(!pJson["edited_at"].isNull())
        {
            auto timeStr = pJson["edited_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                editedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

void Flights::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 17)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            userId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            departureAirportId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            arrivalAirportId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[4]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                flightDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            flightDuration_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            distance_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            routePath_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            flightNumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            airplaneType_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            airplaneRegistration_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            seat_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            seatType_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            flightClass_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            flightReason_=std::make_shared<std::string>(pJson[pMasqueradingVector[14]].asString());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[15]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[16]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                editedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

void Flights::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("user_id"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["user_id"].isNull())
        {
            userId_=std::make_shared<int32_t>((int32_t)pJson["user_id"].asInt64());
        }
    }
    if(pJson.isMember("departure_airport_id"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["departure_airport_id"].isNull())
        {
            departureAirportId_=std::make_shared<int32_t>((int32_t)pJson["departure_airport_id"].asInt64());
        }
    }
    if(pJson.isMember("arrival_airport_id"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["arrival_airport_id"].isNull())
        {
            arrivalAirportId_=std::make_shared<int32_t>((int32_t)pJson["arrival_airport_id"].asInt64());
        }
    }
    if(pJson.isMember("flight_date"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["flight_date"].isNull())
        {
            auto timeStr = pJson["flight_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                flightDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("flight_duration"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["flight_duration"].isNull())
        {
            flightDuration_=std::make_shared<std::string>(pJson["flight_duration"].asString());
        }
    }
    if(pJson.isMember("distance"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["distance"].isNull())
        {
            distance_=std::make_shared<int32_t>((int32_t)pJson["distance"].asInt64());
        }
    }
    if(pJson.isMember("route_path"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["route_path"].isNull())
        {
            routePath_=std::make_shared<std::string>(pJson["route_path"].asString());
        }
    }
    if(pJson.isMember("flight_number"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["flight_number"].isNull())
        {
            flightNumber_=std::make_shared<std::string>(pJson["flight_number"].asString());
        }
    }
    if(pJson.isMember("airplane_type"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["airplane_type"].isNull())
        {
            airplaneType_=std::make_shared<std::string>(pJson["airplane_type"].asString());
        }
    }
    if(pJson.isMember("airplane_registration"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["airplane_registration"].isNull())
        {
            airplaneRegistration_=std::make_shared<std::string>(pJson["airplane_registration"].asString());
        }
    }
    if(pJson.isMember("seat"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["seat"].isNull())
        {
            seat_=std::make_shared<std::string>(pJson["seat"].asString());
        }
    }
    if(pJson.isMember("seat_type"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["seat_type"].isNull())
        {
            seatType_=std::make_shared<std::string>(pJson["seat_type"].asString());
        }
    }
    if(pJson.isMember("flight_class"))
    {
        dirtyFlag_[13] = true;
        if(!pJson["flight_class"].isNull())
        {
            flightClass_=std::make_shared<std::string>(pJson["flight_class"].asString());
        }
    }
    if(pJson.isMember("flight_reason"))
    {
        dirtyFlag_[14] = true;
        if(!pJson["flight_reason"].isNull())
        {
            flightReason_=std::make_shared<std::string>(pJson["flight_reason"].asString());
        }
    }
    if(pJson.isMember("created_at"))
    {
        dirtyFlag_[15] = true;
        if(!pJson["created_at"].isNull())
        {
            auto timeStr = pJson["created_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("edited_at"))
    {
        dirtyFlag_[16] = true;
        if(!pJson["edited_at"].isNull())
        {
            auto timeStr = pJson["edited_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                editedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

const int32_t &Flights::getValueOfId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Flights::getId() const noexcept
{
    return id_;
}
void Flights::setId(const int32_t &pId) noexcept
{
    id_ = std::make_shared<int32_t>(pId);
    dirtyFlag_[0] = true;
}
const typename Flights::PrimaryKeyType & Flights::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const int32_t &Flights::getValueOfUserId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(userId_)
        return *userId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Flights::getUserId() const noexcept
{
    return userId_;
}
void Flights::setUserId(const int32_t &pUserId) noexcept
{
    userId_ = std::make_shared<int32_t>(pUserId);
    dirtyFlag_[1] = true;
}

const int32_t &Flights::getValueOfDepartureAirportId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(departureAirportId_)
        return *departureAirportId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Flights::getDepartureAirportId() const noexcept
{
    return departureAirportId_;
}
void Flights::setDepartureAirportId(const int32_t &pDepartureAirportId) noexcept
{
    departureAirportId_ = std::make_shared<int32_t>(pDepartureAirportId);
    dirtyFlag_[2] = true;
}

const int32_t &Flights::getValueOfArrivalAirportId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(arrivalAirportId_)
        return *arrivalAirportId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Flights::getArrivalAirportId() const noexcept
{
    return arrivalAirportId_;
}
void Flights::setArrivalAirportId(const int32_t &pArrivalAirportId) noexcept
{
    arrivalAirportId_ = std::make_shared<int32_t>(pArrivalAirportId);
    dirtyFlag_[3] = true;
}

const ::trantor::Date &Flights::getValueOfFlightDate() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(flightDate_)
        return *flightDate_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Flights::getFlightDate() const noexcept
{
    return flightDate_;
}
void Flights::setFlightDate(const ::trantor::Date &pFlightDate) noexcept
{
    flightDate_ = std::make_shared<::trantor::Date>(pFlightDate);
    dirtyFlag_[4] = true;
}

const std::string &Flights::getValueOfFlightDuration() const noexcept
{
    static const std::string defaultValue = std::string();
    if(flightDuration_)
        return *flightDuration_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Flights::getFlightDuration() const noexcept
{
    return flightDuration_;
}
void Flights::setFlightDuration(const std::string &pFlightDuration) noexcept
{
    flightDuration_ = std::make_shared<std::string>(pFlightDuration);
    dirtyFlag_[5] = true;
}
void Flights::setFlightDuration(std::string &&pFlightDuration) noexcept
{
    flightDuration_ = std::make_shared<std::string>(std::move(pFlightDuration));
    dirtyFlag_[5] = true;
}
void Flights::setFlightDurationToNull() noexcept
{
    flightDuration_.reset();
    dirtyFlag_[5] = true;
}

const int32_t &Flights::getValueOfDistance() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(distance_)
        return *distance_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Flights::getDistance() const noexcept
{
    return distance_;
}
void Flights::setDistance(const int32_t &pDistance) noexcept
{
    distance_ = std::make_shared<int32_t>(pDistance);
    dirtyFlag_[6] = true;
}
void Flights::setDistanceToNull() noexcept
{
    distance_.reset();
    dirtyFlag_[6] = true;
}

const std::string &Flights::getValueOfRoutePath() const noexcept
{
    static const std::string defaultValue = std::string();
    if(routePath_)
        return *routePath_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Flights::getRoutePath() const noexcept
{
    return routePath_;
}
void Flights::setRoutePath(const std::string &pRoutePath) noexcept
{
    routePath_ = std::make_shared<std::string>(pRoutePath);
    dirtyFlag_[7] = true;
}
void Flights::setRoutePath(std::string &&pRoutePath) noexcept
{
    routePath_ = std::make_shared<std::string>(std::move(pRoutePath));
    dirtyFlag_[7] = true;
}
void Flights::setRoutePathToNull() noexcept
{
    routePath_.reset();
    dirtyFlag_[7] = true;
}

const std::string &Flights::getValueOfFlightNumber() const noexcept
{
    static const std::string defaultValue = std::string();
    if(flightNumber_)
        return *flightNumber_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Flights::getFlightNumber() const noexcept
{
    return flightNumber_;
}
void Flights::setFlightNumber(const std::string &pFlightNumber) noexcept
{
    flightNumber_ = std::make_shared<std::string>(pFlightNumber);
    dirtyFlag_[8] = true;
}
void Flights::setFlightNumber(std::string &&pFlightNumber) noexcept
{
    flightNumber_ = std::make_shared<std::string>(std::move(pFlightNumber));
    dirtyFlag_[8] = true;
}
void Flights::setFlightNumberToNull() noexcept
{
    flightNumber_.reset();
    dirtyFlag_[8] = true;
}

const std::string &Flights::getValueOfAirplaneType() const noexcept
{
    static const std::string defaultValue = std::string();
    if(airplaneType_)
        return *airplaneType_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Flights::getAirplaneType() const noexcept
{
    return airplaneType_;
}
void Flights::setAirplaneType(const std::string &pAirplaneType) noexcept
{
    airplaneType_ = std::make_shared<std::string>(pAirplaneType);
    dirtyFlag_[9] = true;
}
void Flights::setAirplaneType(std::string &&pAirplaneType) noexcept
{
    airplaneType_ = std::make_shared<std::string>(std::move(pAirplaneType));
    dirtyFlag_[9] = true;
}
void Flights::setAirplaneTypeToNull() noexcept
{
    airplaneType_.reset();
    dirtyFlag_[9] = true;
}

const std::string &Flights::getValueOfAirplaneRegistration() const noexcept
{
    static const std::string defaultValue = std::string();
    if(airplaneRegistration_)
        return *airplaneRegistration_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Flights::getAirplaneRegistration() const noexcept
{
    return airplaneRegistration_;
}
void Flights::setAirplaneRegistration(const std::string &pAirplaneRegistration) noexcept
{
    airplaneRegistration_ = std::make_shared<std::string>(pAirplaneRegistration);
    dirtyFlag_[10] = true;
}
void Flights::setAirplaneRegistration(std::string &&pAirplaneRegistration) noexcept
{
    airplaneRegistration_ = std::make_shared<std::string>(std::move(pAirplaneRegistration));
    dirtyFlag_[10] = true;
}
void Flights::setAirplaneRegistrationToNull() noexcept
{
    airplaneRegistration_.reset();
    dirtyFlag_[10] = true;
}

const std::string &Flights::getValueOfSeat() const noexcept
{
    static const std::string defaultValue = std::string();
    if(seat_)
        return *seat_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Flights::getSeat() const noexcept
{
    return seat_;
}
void Flights::setSeat(const std::string &pSeat) noexcept
{
    seat_ = std::make_shared<std::string>(pSeat);
    dirtyFlag_[11] = true;
}
void Flights::setSeat(std::string &&pSeat) noexcept
{
    seat_ = std::make_shared<std::string>(std::move(pSeat));
    dirtyFlag_[11] = true;
}
void Flights::setSeatToNull() noexcept
{
    seat_.reset();
    dirtyFlag_[11] = true;
}

const std::string &Flights::getValueOfSeatType() const noexcept
{
    static const std::string defaultValue = std::string();
    if(seatType_)
        return *seatType_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Flights::getSeatType() const noexcept
{
    return seatType_;
}
void Flights::setSeatType(const std::string &pSeatType) noexcept
{
    seatType_ = std::make_shared<std::string>(pSeatType);
    dirtyFlag_[12] = true;
}
void Flights::setSeatType(std::string &&pSeatType) noexcept
{
    seatType_ = std::make_shared<std::string>(std::move(pSeatType));
    dirtyFlag_[12] = true;
}
void Flights::setSeatTypeToNull() noexcept
{
    seatType_.reset();
    dirtyFlag_[12] = true;
}

const std::string &Flights::getValueOfFlightClass() const noexcept
{
    static const std::string defaultValue = std::string();
    if(flightClass_)
        return *flightClass_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Flights::getFlightClass() const noexcept
{
    return flightClass_;
}
void Flights::setFlightClass(const std::string &pFlightClass) noexcept
{
    flightClass_ = std::make_shared<std::string>(pFlightClass);
    dirtyFlag_[13] = true;
}
void Flights::setFlightClass(std::string &&pFlightClass) noexcept
{
    flightClass_ = std::make_shared<std::string>(std::move(pFlightClass));
    dirtyFlag_[13] = true;
}
void Flights::setFlightClassToNull() noexcept
{
    flightClass_.reset();
    dirtyFlag_[13] = true;
}

const std::string &Flights::getValueOfFlightReason() const noexcept
{
    static const std::string defaultValue = std::string();
    if(flightReason_)
        return *flightReason_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Flights::getFlightReason() const noexcept
{
    return flightReason_;
}
void Flights::setFlightReason(const std::string &pFlightReason) noexcept
{
    flightReason_ = std::make_shared<std::string>(pFlightReason);
    dirtyFlag_[14] = true;
}
void Flights::setFlightReason(std::string &&pFlightReason) noexcept
{
    flightReason_ = std::make_shared<std::string>(std::move(pFlightReason));
    dirtyFlag_[14] = true;
}
void Flights::setFlightReasonToNull() noexcept
{
    flightReason_.reset();
    dirtyFlag_[14] = true;
}

const ::trantor::Date &Flights::getValueOfCreatedAt() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(createdAt_)
        return *createdAt_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Flights::getCreatedAt() const noexcept
{
    return createdAt_;
}
void Flights::setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept
{
    createdAt_ = std::make_shared<::trantor::Date>(pCreatedAt);
    dirtyFlag_[15] = true;
}

const ::trantor::Date &Flights::getValueOfEditedAt() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(editedAt_)
        return *editedAt_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Flights::getEditedAt() const noexcept
{
    return editedAt_;
}
void Flights::setEditedAt(const ::trantor::Date &pEditedAt) noexcept
{
    editedAt_ = std::make_shared<::trantor::Date>(pEditedAt);
    dirtyFlag_[16] = true;
}

void Flights::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Flights::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "user_id",
        "departure_airport_id",
        "arrival_airport_id",
        "flight_date",
        "flight_duration",
        "distance",
        "route_path",
        "flight_number",
        "airplane_type",
        "airplane_registration",
        "seat",
        "seat_type",
        "flight_class",
        "flight_reason",
        "created_at",
        "edited_at"
    };
    return inCols;
}

void Flights::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getDepartureAirportId())
        {
            binder << getValueOfDepartureAirportId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getArrivalAirportId())
        {
            binder << getValueOfArrivalAirportId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getFlightDate())
        {
            binder << getValueOfFlightDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getFlightDuration())
        {
            binder << getValueOfFlightDuration();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getDistance())
        {
            binder << getValueOfDistance();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getRoutePath())
        {
            binder << getValueOfRoutePath();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getFlightNumber())
        {
            binder << getValueOfFlightNumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getAirplaneType())
        {
            binder << getValueOfAirplaneType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getAirplaneRegistration())
        {
            binder << getValueOfAirplaneRegistration();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getSeat())
        {
            binder << getValueOfSeat();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getSeatType())
        {
            binder << getValueOfSeatType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getFlightClass())
        {
            binder << getValueOfFlightClass();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getFlightReason())
        {
            binder << getValueOfFlightReason();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getEditedAt())
        {
            binder << getValueOfEditedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Flights::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    if(dirtyFlag_[13])
    {
        ret.push_back(getColumnName(13));
    }
    if(dirtyFlag_[14])
    {
        ret.push_back(getColumnName(14));
    }
    if(dirtyFlag_[15])
    {
        ret.push_back(getColumnName(15));
    }
    if(dirtyFlag_[16])
    {
        ret.push_back(getColumnName(16));
    }
    return ret;
}

void Flights::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getDepartureAirportId())
        {
            binder << getValueOfDepartureAirportId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getArrivalAirportId())
        {
            binder << getValueOfArrivalAirportId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getFlightDate())
        {
            binder << getValueOfFlightDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getFlightDuration())
        {
            binder << getValueOfFlightDuration();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getDistance())
        {
            binder << getValueOfDistance();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getRoutePath())
        {
            binder << getValueOfRoutePath();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getFlightNumber())
        {
            binder << getValueOfFlightNumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getAirplaneType())
        {
            binder << getValueOfAirplaneType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getAirplaneRegistration())
        {
            binder << getValueOfAirplaneRegistration();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getSeat())
        {
            binder << getValueOfSeat();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getSeatType())
        {
            binder << getValueOfSeatType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getFlightClass())
        {
            binder << getValueOfFlightClass();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getFlightReason())
        {
            binder << getValueOfFlightReason();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getEditedAt())
        {
            binder << getValueOfEditedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Flights::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getUserId())
    {
        ret["user_id"]=getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getDepartureAirportId())
    {
        ret["departure_airport_id"]=getValueOfDepartureAirportId();
    }
    else
    {
        ret["departure_airport_id"]=Json::Value();
    }
    if(getArrivalAirportId())
    {
        ret["arrival_airport_id"]=getValueOfArrivalAirportId();
    }
    else
    {
        ret["arrival_airport_id"]=Json::Value();
    }
    if(getFlightDate())
    {
        ret["flight_date"]=getFlightDate()->toDbStringLocal();
    }
    else
    {
        ret["flight_date"]=Json::Value();
    }
    if(getFlightDuration())
    {
        ret["flight_duration"]=getValueOfFlightDuration();
    }
    else
    {
        ret["flight_duration"]=Json::Value();
    }
    if(getDistance())
    {
        ret["distance"]=getValueOfDistance();
    }
    else
    {
        ret["distance"]=Json::Value();
    }
    if(getRoutePath())
    {
        ret["route_path"]=getValueOfRoutePath();
    }
    else
    {
        ret["route_path"]=Json::Value();
    }
    if(getFlightNumber())
    {
        ret["flight_number"]=getValueOfFlightNumber();
    }
    else
    {
        ret["flight_number"]=Json::Value();
    }
    if(getAirplaneType())
    {
        ret["airplane_type"]=getValueOfAirplaneType();
    }
    else
    {
        ret["airplane_type"]=Json::Value();
    }
    if(getAirplaneRegistration())
    {
        ret["airplane_registration"]=getValueOfAirplaneRegistration();
    }
    else
    {
        ret["airplane_registration"]=Json::Value();
    }
    if(getSeat())
    {
        ret["seat"]=getValueOfSeat();
    }
    else
    {
        ret["seat"]=Json::Value();
    }
    if(getSeatType())
    {
        ret["seat_type"]=getValueOfSeatType();
    }
    else
    {
        ret["seat_type"]=Json::Value();
    }
    if(getFlightClass())
    {
        ret["flight_class"]=getValueOfFlightClass();
    }
    else
    {
        ret["flight_class"]=Json::Value();
    }
    if(getFlightReason())
    {
        ret["flight_reason"]=getValueOfFlightReason();
    }
    else
    {
        ret["flight_reason"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getEditedAt())
    {
        ret["edited_at"]=getEditedAt()->toDbStringLocal();
    }
    else
    {
        ret["edited_at"]=Json::Value();
    }
    return ret;
}

Json::Value Flights::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 17)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getUserId())
            {
                ret[pMasqueradingVector[1]]=getValueOfUserId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getDepartureAirportId())
            {
                ret[pMasqueradingVector[2]]=getValueOfDepartureAirportId();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getArrivalAirportId())
            {
                ret[pMasqueradingVector[3]]=getValueOfArrivalAirportId();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getFlightDate())
            {
                ret[pMasqueradingVector[4]]=getFlightDate()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getFlightDuration())
            {
                ret[pMasqueradingVector[5]]=getValueOfFlightDuration();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getDistance())
            {
                ret[pMasqueradingVector[6]]=getValueOfDistance();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getRoutePath())
            {
                ret[pMasqueradingVector[7]]=getValueOfRoutePath();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getFlightNumber())
            {
                ret[pMasqueradingVector[8]]=getValueOfFlightNumber();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getAirplaneType())
            {
                ret[pMasqueradingVector[9]]=getValueOfAirplaneType();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getAirplaneRegistration())
            {
                ret[pMasqueradingVector[10]]=getValueOfAirplaneRegistration();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getSeat())
            {
                ret[pMasqueradingVector[11]]=getValueOfSeat();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getSeatType())
            {
                ret[pMasqueradingVector[12]]=getValueOfSeatType();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getFlightClass())
            {
                ret[pMasqueradingVector[13]]=getValueOfFlightClass();
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[14].empty())
        {
            if(getFlightReason())
            {
                ret[pMasqueradingVector[14]]=getValueOfFlightReason();
            }
            else
            {
                ret[pMasqueradingVector[14]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[15].empty())
        {
            if(getCreatedAt())
            {
                ret[pMasqueradingVector[15]]=getCreatedAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[15]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[16].empty())
        {
            if(getEditedAt())
            {
                ret[pMasqueradingVector[16]]=getEditedAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[16]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getUserId())
    {
        ret["user_id"]=getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getDepartureAirportId())
    {
        ret["departure_airport_id"]=getValueOfDepartureAirportId();
    }
    else
    {
        ret["departure_airport_id"]=Json::Value();
    }
    if(getArrivalAirportId())
    {
        ret["arrival_airport_id"]=getValueOfArrivalAirportId();
    }
    else
    {
        ret["arrival_airport_id"]=Json::Value();
    }
    if(getFlightDate())
    {
        ret["flight_date"]=getFlightDate()->toDbStringLocal();
    }
    else
    {
        ret["flight_date"]=Json::Value();
    }
    if(getFlightDuration())
    {
        ret["flight_duration"]=getValueOfFlightDuration();
    }
    else
    {
        ret["flight_duration"]=Json::Value();
    }
    if(getDistance())
    {
        ret["distance"]=getValueOfDistance();
    }
    else
    {
        ret["distance"]=Json::Value();
    }
    if(getRoutePath())
    {
        ret["route_path"]=getValueOfRoutePath();
    }
    else
    {
        ret["route_path"]=Json::Value();
    }
    if(getFlightNumber())
    {
        ret["flight_number"]=getValueOfFlightNumber();
    }
    else
    {
        ret["flight_number"]=Json::Value();
    }
    if(getAirplaneType())
    {
        ret["airplane_type"]=getValueOfAirplaneType();
    }
    else
    {
        ret["airplane_type"]=Json::Value();
    }
    if(getAirplaneRegistration())
    {
        ret["airplane_registration"]=getValueOfAirplaneRegistration();
    }
    else
    {
        ret["airplane_registration"]=Json::Value();
    }
    if(getSeat())
    {
        ret["seat"]=getValueOfSeat();
    }
    else
    {
        ret["seat"]=Json::Value();
    }
    if(getSeatType())
    {
        ret["seat_type"]=getValueOfSeatType();
    }
    else
    {
        ret["seat_type"]=Json::Value();
    }
    if(getFlightClass())
    {
        ret["flight_class"]=getValueOfFlightClass();
    }
    else
    {
        ret["flight_class"]=Json::Value();
    }
    if(getFlightReason())
    {
        ret["flight_reason"]=getValueOfFlightReason();
    }
    else
    {
        ret["flight_reason"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getEditedAt())
    {
        ret["edited_at"]=getEditedAt()->toDbStringLocal();
    }
    else
    {
        ret["edited_at"]=Json::Value();
    }
    return ret;
}

bool Flights::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("user_id"))
    {
        if(!validJsonOfField(1, "user_id", pJson["user_id"], err, true))
            return false;
    }
    else
    {
        err="The user_id column cannot be null";
        return false;
    }
    if(pJson.isMember("departure_airport_id"))
    {
        if(!validJsonOfField(2, "departure_airport_id", pJson["departure_airport_id"], err, true))
            return false;
    }
    else
    {
        err="The departure_airport_id column cannot be null";
        return false;
    }
    if(pJson.isMember("arrival_airport_id"))
    {
        if(!validJsonOfField(3, "arrival_airport_id", pJson["arrival_airport_id"], err, true))
            return false;
    }
    else
    {
        err="The arrival_airport_id column cannot be null";
        return false;
    }
    if(pJson.isMember("flight_date"))
    {
        if(!validJsonOfField(4, "flight_date", pJson["flight_date"], err, true))
            return false;
    }
    else
    {
        err="The flight_date column cannot be null";
        return false;
    }
    if(pJson.isMember("flight_duration"))
    {
        if(!validJsonOfField(5, "flight_duration", pJson["flight_duration"], err, true))
            return false;
    }
    if(pJson.isMember("distance"))
    {
        if(!validJsonOfField(6, "distance", pJson["distance"], err, true))
            return false;
    }
    if(pJson.isMember("route_path"))
    {
        if(!validJsonOfField(7, "route_path", pJson["route_path"], err, true))
            return false;
    }
    if(pJson.isMember("flight_number"))
    {
        if(!validJsonOfField(8, "flight_number", pJson["flight_number"], err, true))
            return false;
    }
    if(pJson.isMember("airplane_type"))
    {
        if(!validJsonOfField(9, "airplane_type", pJson["airplane_type"], err, true))
            return false;
    }
    if(pJson.isMember("airplane_registration"))
    {
        if(!validJsonOfField(10, "airplane_registration", pJson["airplane_registration"], err, true))
            return false;
    }
    if(pJson.isMember("seat"))
    {
        if(!validJsonOfField(11, "seat", pJson["seat"], err, true))
            return false;
    }
    if(pJson.isMember("seat_type"))
    {
        if(!validJsonOfField(12, "seat_type", pJson["seat_type"], err, true))
            return false;
    }
    if(pJson.isMember("flight_class"))
    {
        if(!validJsonOfField(13, "flight_class", pJson["flight_class"], err, true))
            return false;
    }
    if(pJson.isMember("flight_reason"))
    {
        if(!validJsonOfField(14, "flight_reason", pJson["flight_reason"], err, true))
            return false;
    }
    if(pJson.isMember("created_at"))
    {
        if(!validJsonOfField(15, "created_at", pJson["created_at"], err, true))
            return false;
    }
    if(pJson.isMember("edited_at"))
    {
        if(!validJsonOfField(16, "edited_at", pJson["edited_at"], err, true))
            return false;
    }
    return true;
}
bool Flights::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                 const std::vector<std::string> &pMasqueradingVector,
                                                 std::string &err)
{
    if(pMasqueradingVector.size() != 17)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[10].empty())
      {
          if(pJson.isMember(pMasqueradingVector[10]))
          {
              if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[11].empty())
      {
          if(pJson.isMember(pMasqueradingVector[11]))
          {
              if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[12].empty())
      {
          if(pJson.isMember(pMasqueradingVector[12]))
          {
              if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[13].empty())
      {
          if(pJson.isMember(pMasqueradingVector[13]))
          {
              if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[14].empty())
      {
          if(pJson.isMember(pMasqueradingVector[14]))
          {
              if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[15].empty())
      {
          if(pJson.isMember(pMasqueradingVector[15]))
          {
              if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[16].empty())
      {
          if(pJson.isMember(pMasqueradingVector[16]))
          {
              if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Flights::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("user_id"))
    {
        if(!validJsonOfField(1, "user_id", pJson["user_id"], err, false))
            return false;
    }
    if(pJson.isMember("departure_airport_id"))
    {
        if(!validJsonOfField(2, "departure_airport_id", pJson["departure_airport_id"], err, false))
            return false;
    }
    if(pJson.isMember("arrival_airport_id"))
    {
        if(!validJsonOfField(3, "arrival_airport_id", pJson["arrival_airport_id"], err, false))
            return false;
    }
    if(pJson.isMember("flight_date"))
    {
        if(!validJsonOfField(4, "flight_date", pJson["flight_date"], err, false))
            return false;
    }
    if(pJson.isMember("flight_duration"))
    {
        if(!validJsonOfField(5, "flight_duration", pJson["flight_duration"], err, false))
            return false;
    }
    if(pJson.isMember("distance"))
    {
        if(!validJsonOfField(6, "distance", pJson["distance"], err, false))
            return false;
    }
    if(pJson.isMember("route_path"))
    {
        if(!validJsonOfField(7, "route_path", pJson["route_path"], err, false))
            return false;
    }
    if(pJson.isMember("flight_number"))
    {
        if(!validJsonOfField(8, "flight_number", pJson["flight_number"], err, false))
            return false;
    }
    if(pJson.isMember("airplane_type"))
    {
        if(!validJsonOfField(9, "airplane_type", pJson["airplane_type"], err, false))
            return false;
    }
    if(pJson.isMember("airplane_registration"))
    {
        if(!validJsonOfField(10, "airplane_registration", pJson["airplane_registration"], err, false))
            return false;
    }
    if(pJson.isMember("seat"))
    {
        if(!validJsonOfField(11, "seat", pJson["seat"], err, false))
            return false;
    }
    if(pJson.isMember("seat_type"))
    {
        if(!validJsonOfField(12, "seat_type", pJson["seat_type"], err, false))
            return false;
    }
    if(pJson.isMember("flight_class"))
    {
        if(!validJsonOfField(13, "flight_class", pJson["flight_class"], err, false))
            return false;
    }
    if(pJson.isMember("flight_reason"))
    {
        if(!validJsonOfField(14, "flight_reason", pJson["flight_reason"], err, false))
            return false;
    }
    if(pJson.isMember("created_at"))
    {
        if(!validJsonOfField(15, "created_at", pJson["created_at"], err, false))
            return false;
    }
    if(pJson.isMember("edited_at"))
    {
        if(!validJsonOfField(16, "edited_at", pJson["edited_at"], err, false))
            return false;
    }
    return true;
}
bool Flights::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 17)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
      if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
      {
          if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
              return false;
      }
      if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
      {
          if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
              return false;
      }
      if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
      {
          if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
              return false;
      }
      if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
      {
          if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
              return false;
      }
      if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
      {
          if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, false))
              return false;
      }
      if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
      {
          if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, false))
              return false;
      }
      if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
      {
          if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Flights::validJsonOfField(size_t index,
                               const std::string &fieldName,
                               const Json::Value &pJson,
                               std::string &err,
                               bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;
            }

            break;
        case 9:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;
            }

            break;
        case 10:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;
            }

            break;
        case 11:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 4)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 4)";
                return false;
            }

            break;
        case 12:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 13:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 14:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 15:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 16:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
