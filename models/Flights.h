/**
 *
 *  Flights.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <drogon/orm/BaseBuilder.h>
#ifdef __cpp_impl_coroutine
#include <drogon/orm/CoroMapper.h>
#endif
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <string_view>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace mydatabase
{

class Flights
{
  public:
    struct Cols
    {
        static const std::string _id;
        static const std::string _user_id;
        static const std::string _departure_airport_id;
        static const std::string _arrival_airport_id;
        static const std::string _flight_date;
        static const std::string _flight_duration;
        static const std::string _distance;
        static const std::string _route_path;
        static const std::string _flight_number;
        static const std::string _airplane_type;
        static const std::string _airplane_registration;
        static const std::string _seat;
        static const std::string _seat_type;
        static const std::string _flight_class;
        static const std::string _flight_reason;
        static const std::string _created_at;
    };

    static const int primaryKeyNumber;
    static const std::string tableName;
    static const bool hasPrimaryKey;
    static const std::string primaryKeyName;
    using PrimaryKeyType = int32_t;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names,
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all
     * columns by an asterisk), please set the offset to -1.
     */
    explicit Flights(const drogon::orm::Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit Flights(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    Flights(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    Flights() = default;

    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson,
                          std::string &err,
                          bool isForCreation);

    /**  For column id  */
    ///Get the value of the column id, returns the default value if the column is null
    const int32_t &getValueOfId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getId() const noexcept;
    ///Set the value of the column id
    void setId(const int32_t &pId) noexcept;

    /**  For column user_id  */
    ///Get the value of the column user_id, returns the default value if the column is null
    const int32_t &getValueOfUserId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getUserId() const noexcept;
    ///Set the value of the column user_id
    void setUserId(const int32_t &pUserId) noexcept;

    /**  For column departure_airport_id  */
    ///Get the value of the column departure_airport_id, returns the default value if the column is null
    const int32_t &getValueOfDepartureAirportId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getDepartureAirportId() const noexcept;
    ///Set the value of the column departure_airport_id
    void setDepartureAirportId(const int32_t &pDepartureAirportId) noexcept;

    /**  For column arrival_airport_id  */
    ///Get the value of the column arrival_airport_id, returns the default value if the column is null
    const int32_t &getValueOfArrivalAirportId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getArrivalAirportId() const noexcept;
    ///Set the value of the column arrival_airport_id
    void setArrivalAirportId(const int32_t &pArrivalAirportId) noexcept;

    /**  For column flight_date  */
    ///Get the value of the column flight_date, returns the default value if the column is null
    const ::trantor::Date &getValueOfFlightDate() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getFlightDate() const noexcept;
    ///Set the value of the column flight_date
    void setFlightDate(const ::trantor::Date &pFlightDate) noexcept;

    /**  For column flight_duration  */
    ///Get the value of the column flight_duration, returns the default value if the column is null
    const std::string &getValueOfFlightDuration() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getFlightDuration() const noexcept;
    ///Set the value of the column flight_duration
    void setFlightDuration(const std::string &pFlightDuration) noexcept;
    void setFlightDuration(std::string &&pFlightDuration) noexcept;
    void setFlightDurationToNull() noexcept;

    /**  For column distance  */
    ///Get the value of the column distance, returns the default value if the column is null
    const int32_t &getValueOfDistance() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getDistance() const noexcept;
    ///Set the value of the column distance
    void setDistance(const int32_t &pDistance) noexcept;
    void setDistanceToNull() noexcept;

    /**  For column route_path  */
    ///Get the value of the column route_path, returns the default value if the column is null
    const std::string &getValueOfRoutePath() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getRoutePath() const noexcept;
    ///Set the value of the column route_path
    void setRoutePath(const std::string &pRoutePath) noexcept;
    void setRoutePath(std::string &&pRoutePath) noexcept;
    void setRoutePathToNull() noexcept;

    /**  For column flight_number  */
    ///Get the value of the column flight_number, returns the default value if the column is null
    const std::string &getValueOfFlightNumber() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getFlightNumber() const noexcept;
    ///Set the value of the column flight_number
    void setFlightNumber(const std::string &pFlightNumber) noexcept;
    void setFlightNumber(std::string &&pFlightNumber) noexcept;
    void setFlightNumberToNull() noexcept;

    /**  For column airplane_type  */
    ///Get the value of the column airplane_type, returns the default value if the column is null
    const std::string &getValueOfAirplaneType() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getAirplaneType() const noexcept;
    ///Set the value of the column airplane_type
    void setAirplaneType(const std::string &pAirplaneType) noexcept;
    void setAirplaneType(std::string &&pAirplaneType) noexcept;
    void setAirplaneTypeToNull() noexcept;

    /**  For column airplane_registration  */
    ///Get the value of the column airplane_registration, returns the default value if the column is null
    const std::string &getValueOfAirplaneRegistration() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getAirplaneRegistration() const noexcept;
    ///Set the value of the column airplane_registration
    void setAirplaneRegistration(const std::string &pAirplaneRegistration) noexcept;
    void setAirplaneRegistration(std::string &&pAirplaneRegistration) noexcept;
    void setAirplaneRegistrationToNull() noexcept;

    /**  For column seat  */
    ///Get the value of the column seat, returns the default value if the column is null
    const std::string &getValueOfSeat() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getSeat() const noexcept;
    ///Set the value of the column seat
    void setSeat(const std::string &pSeat) noexcept;
    void setSeat(std::string &&pSeat) noexcept;
    void setSeatToNull() noexcept;

    /**  For column seat_type  */
    ///Get the value of the column seat_type, returns the default value if the column is null
    const std::string &getValueOfSeatType() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getSeatType() const noexcept;
    ///Set the value of the column seat_type
    void setSeatType(const std::string &pSeatType) noexcept;
    void setSeatType(std::string &&pSeatType) noexcept;
    void setSeatTypeToNull() noexcept;

    /**  For column flight_class  */
    ///Get the value of the column flight_class, returns the default value if the column is null
    const std::string &getValueOfFlightClass() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getFlightClass() const noexcept;
    ///Set the value of the column flight_class
    void setFlightClass(const std::string &pFlightClass) noexcept;
    void setFlightClass(std::string &&pFlightClass) noexcept;
    void setFlightClassToNull() noexcept;

    /**  For column flight_reason  */
    ///Get the value of the column flight_reason, returns the default value if the column is null
    const std::string &getValueOfFlightReason() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getFlightReason() const noexcept;
    ///Set the value of the column flight_reason
    void setFlightReason(const std::string &pFlightReason) noexcept;
    void setFlightReason(std::string &&pFlightReason) noexcept;
    void setFlightReasonToNull() noexcept;

    /**  For column created_at  */
    ///Get the value of the column created_at, returns the default value if the column is null
    const ::trantor::Date &getValueOfCreatedAt() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getCreatedAt() const noexcept;
    ///Set the value of the column created_at
    void setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept;


    static size_t getColumnNumber() noexcept {  return 16;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
  private:
    friend drogon::orm::Mapper<Flights>;
    friend drogon::orm::BaseBuilder<Flights, true, true>;
    friend drogon::orm::BaseBuilder<Flights, true, false>;
    friend drogon::orm::BaseBuilder<Flights, false, true>;
    friend drogon::orm::BaseBuilder<Flights, false, false>;
#ifdef __cpp_impl_coroutine
    friend drogon::orm::CoroMapper<Flights>;
#endif
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<int32_t> id_;
    std::shared_ptr<int32_t> userId_;
    std::shared_ptr<int32_t> departureAirportId_;
    std::shared_ptr<int32_t> arrivalAirportId_;
    std::shared_ptr<::trantor::Date> flightDate_;
    std::shared_ptr<std::string> flightDuration_;
    std::shared_ptr<int32_t> distance_;
    std::shared_ptr<std::string> routePath_;
    std::shared_ptr<std::string> flightNumber_;
    std::shared_ptr<std::string> airplaneType_;
    std::shared_ptr<std::string> airplaneRegistration_;
    std::shared_ptr<std::string> seat_;
    std::shared_ptr<std::string> seatType_;
    std::shared_ptr<std::string> flightClass_;
    std::shared_ptr<std::string> flightReason_;
    std::shared_ptr<::trantor::Date> createdAt_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[16]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where id = $1";
        return sql;
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where id = $1";
        return sql;
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
            sql += "id,";
            ++parametersCount;
        if(dirtyFlag_[1])
        {
            sql += "user_id,";
            ++parametersCount;
        }
        if(dirtyFlag_[2])
        {
            sql += "departure_airport_id,";
            ++parametersCount;
        }
        if(dirtyFlag_[3])
        {
            sql += "arrival_airport_id,";
            ++parametersCount;
        }
        if(dirtyFlag_[4])
        {
            sql += "flight_date,";
            ++parametersCount;
        }
        if(dirtyFlag_[5])
        {
            sql += "flight_duration,";
            ++parametersCount;
        }
        if(dirtyFlag_[6])
        {
            sql += "distance,";
            ++parametersCount;
        }
        if(dirtyFlag_[7])
        {
            sql += "route_path,";
            ++parametersCount;
        }
        if(dirtyFlag_[8])
        {
            sql += "flight_number,";
            ++parametersCount;
        }
        if(dirtyFlag_[9])
        {
            sql += "airplane_type,";
            ++parametersCount;
        }
        if(dirtyFlag_[10])
        {
            sql += "airplane_registration,";
            ++parametersCount;
        }
        if(dirtyFlag_[11])
        {
            sql += "seat,";
            ++parametersCount;
        }
        if(dirtyFlag_[12])
        {
            sql += "seat_type,";
            ++parametersCount;
        }
        if(dirtyFlag_[13])
        {
            sql += "flight_class,";
            ++parametersCount;
        }
        if(dirtyFlag_[14])
        {
            sql += "flight_reason,";
            ++parametersCount;
        }
        sql += "created_at,";
        ++parametersCount;
        if(!dirtyFlag_[15])
        {
            needSelection=true;
        }
        needSelection=true;
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";

        int placeholder=1;
        char placeholderStr[64];
        size_t n=0;
        sql +="default,";
        if(dirtyFlag_[1])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[2])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[3])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[4])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[5])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[6])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[7])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[8])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[9])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[10])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[11])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[12])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[13])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[14])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[15])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        else
        {
            sql +="default,";
        }
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        if(needSelection)
        {
            sql.append(") returning *");
        }
        else
        {
            sql.append(1, ')');
        }
        LOG_TRACE << sql;
        return sql;
    }
};
} // namespace mydatabase
} // namespace drogon_model
